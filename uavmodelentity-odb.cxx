// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "uavmodelentity-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // UavModelEntity
  //

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  persist_statement_name[] = "persist_UavModelEntity";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  find_statement_name[] = "find_UavModelEntity";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  update_statement_name[] = "update_UavModelEntity";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  erase_statement_name[] = "erase_UavModelEntity";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  query_statement_name[] = "query_UavModelEntity";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  erase_query_statement_name[] = "erase_query_UavModelEntity";

  const unsigned int access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::timestamp_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::UavModelEntity, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::UavModelEntity, id_pgsql >::id_type
  access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::UavModelEntity, id_pgsql >::id_type
  access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // uavType_
    //
    if (t[1UL])
    {
      i.uavType_value.capacity (i.uavType_size);
      grew = true;
    }

    // uavName_
    //
    if (t[2UL])
    {
      i.uavName_value.capacity (i.uavName_size);
      grew = true;
    }

    // uavId_
    //
    if (t[3UL])
    {
      i.uavId_value.capacity (i.uavId_size);
      grew = true;
    }

    // uavLength_
    //
    t[4UL] = 0;

    // uavWidth_
    //
    t[5UL] = 0;

    // uavHeight_
    //
    t[6UL] = 0;

    // uavLoadAmmoType_
    //
    if (t[7UL])
    {
      i.uavLoadAmmoType_value.capacity (i.uavLoadAmmoType_size);
      grew = true;
    }

    // uavFlightHeightRangeMin_
    //
    t[8UL] = 0;

    // uavFlightHeightRangeMax_
    //
    t[9UL] = 0;

    // uavFlightSpeedRangeMin_
    //
    t[10UL] = 0;

    // uavFlightSpeedRangeMax_
    //
    t[11UL] = 0;

    // uavFlightDistanceRangeMin_
    //
    t[12UL] = 0;

    // uavFlightDistanceRangeMax_
    //
    t[13UL] = 0;

    // uavFlightTimeRangeMin_
    //
    t[14UL] = 0;

    // uavFlightTimeRangeMax_
    //
    t[15UL] = 0;

    // uavTakeoffDistance_
    //
    t[16UL] = 0;

    // uavLandDistance_
    //
    t[17UL] = 0;

    // uavTurningRadiusRangeMin_
    //
    t[18UL] = 0;

    // uavTurningRadiusRangeMax_
    //
    t[19UL] = 0;

    // uavOperatioanalRadius_
    //
    t[20UL] = 0;

    // uavInvestigationPayloadType_
    //
    if (t[21UL])
    {
      i.uavInvestigationPayloadType_value.capacity (i.uavInvestigationPayloadType_size);
      grew = true;
    }

    // uavBombingway_
    //
    if (t[22UL])
    {
      i.uavBombingway_value.capacity (i.uavBombingway_size);
      grew = true;
    }

    // uavLoadReconnaissanceRangeMin_
    //
    t[23UL] = 0;

    // uavLoadReconnaissanceRangeMax_
    //
    t[24UL] = 0;

    // uavLoadReconnaissanceAccuracy_
    //
    t[25UL] = 0;

    // uavRecoveryway_
    //
    if (t[26UL])
    {
      i.uavRecoveryway_value.capacity (i.uavRecoveryway_size);
      grew = true;
    }

    // uavLowAltitudeBreakthroughSpeed_
    //
    t[27UL] = 0;

    // uavHangingLoctionCapacity_
    //
    if (t[28UL])
    {
      i.uavHangingLoctionCapacity_value.capacity (i.uavHangingLoctionCapacity_size);
      grew = true;
    }

    // uavOperationWay_
    //
    if (t[29UL])
    {
      i.uavOperationWay_value.capacity (i.uavOperationWay_size);
      grew = true;
    }

    // uavAttackaccuracy_
    //
    t[30UL] = 0;

    // uavRadarCrossSection_
    //
    t[31UL] = 0;

    // uavCenterOfGravityFrontLimit_
    //
    t[32UL] = 0;

    // uavCenterOfGravityAfterwardLimit_
    //
    t[33UL] = 0;

    // uavMaximumTakeoffWeight_
    //
    t[34UL] = 0;

    // uavEmptyWeight_
    //
    t[35UL] = 0;

    // uavMaximumFuelCapacity_
    //
    t[36UL] = 0;

    // uavMaximumExternalWeight_
    //
    t[37UL] = 0;

    // uavCeiling_
    //
    t[38UL] = 0;

    // uavMaximumGroundStartingHeight_
    //
    t[39UL] = 0;

    // uavMaximumAirStartingAltitude_
    //
    t[40UL] = 0;

    // uavMaximumEndurance_
    //
    t[41UL] = 0;

    // uavMaximumFlightVacuumSpeed_
    //
    t[42UL] = 0;

    // uavMinimumFlightMeterSpeed_
    //
    t[43UL] = 0;

    // sealLevelTakeoffAndRollDistance_
    //
    t[44UL] = 0;

    // sealLevelLandingAndRollDistance_
    //
    t[45UL] = 0;

    // cruiseAltitudeReconnaissanceConfiguration_
    //
    t[46UL] = 0;

    // cruiseAltitudeFullExternalConfiguration_
    //
    t[47UL] = 0;

    // uavCreatModelTime_
    //
    t[48UL] = 0;

    // uavImgName_
    //
    if (t[49UL])
    {
      i.uavImgName_value.capacity (i.uavImgName_size);
      grew = true;
    }

    // uavImgUrl_
    //
    if (t[50UL])
    {
      i.uavImgUrl_value.capacity (i.uavImgUrl_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // uavType_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavType_value.data ();
    b[n].capacity = i.uavType_value.capacity ();
    b[n].size = &i.uavType_size;
    b[n].is_null = &i.uavType_null;
    n++;

    // uavName_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavName_value.data ();
    b[n].capacity = i.uavName_value.capacity ();
    b[n].size = &i.uavName_size;
    b[n].is_null = &i.uavName_null;
    n++;

    // uavId_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavId_value.data ();
    b[n].capacity = i.uavId_value.capacity ();
    b[n].size = &i.uavId_size;
    b[n].is_null = &i.uavId_null;
    n++;

    // uavLength_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLength_value;
    b[n].is_null = &i.uavLength_null;
    n++;

    // uavWidth_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavWidth_value;
    b[n].is_null = &i.uavWidth_null;
    n++;

    // uavHeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavHeight_value;
    b[n].is_null = &i.uavHeight_null;
    n++;

    // uavLoadAmmoType_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavLoadAmmoType_value.data ();
    b[n].capacity = i.uavLoadAmmoType_value.capacity ();
    b[n].size = &i.uavLoadAmmoType_size;
    b[n].is_null = &i.uavLoadAmmoType_null;
    n++;

    // uavFlightHeightRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightHeightRangeMin_value;
    b[n].is_null = &i.uavFlightHeightRangeMin_null;
    n++;

    // uavFlightHeightRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightHeightRangeMax_value;
    b[n].is_null = &i.uavFlightHeightRangeMax_null;
    n++;

    // uavFlightSpeedRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightSpeedRangeMin_value;
    b[n].is_null = &i.uavFlightSpeedRangeMin_null;
    n++;

    // uavFlightSpeedRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightSpeedRangeMax_value;
    b[n].is_null = &i.uavFlightSpeedRangeMax_null;
    n++;

    // uavFlightDistanceRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightDistanceRangeMin_value;
    b[n].is_null = &i.uavFlightDistanceRangeMin_null;
    n++;

    // uavFlightDistanceRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightDistanceRangeMax_value;
    b[n].is_null = &i.uavFlightDistanceRangeMax_null;
    n++;

    // uavFlightTimeRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightTimeRangeMin_value;
    b[n].is_null = &i.uavFlightTimeRangeMin_null;
    n++;

    // uavFlightTimeRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavFlightTimeRangeMax_value;
    b[n].is_null = &i.uavFlightTimeRangeMax_null;
    n++;

    // uavTakeoffDistance_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavTakeoffDistance_value;
    b[n].is_null = &i.uavTakeoffDistance_null;
    n++;

    // uavLandDistance_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLandDistance_value;
    b[n].is_null = &i.uavLandDistance_null;
    n++;

    // uavTurningRadiusRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavTurningRadiusRangeMin_value;
    b[n].is_null = &i.uavTurningRadiusRangeMin_null;
    n++;

    // uavTurningRadiusRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavTurningRadiusRangeMax_value;
    b[n].is_null = &i.uavTurningRadiusRangeMax_null;
    n++;

    // uavOperatioanalRadius_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavOperatioanalRadius_value;
    b[n].is_null = &i.uavOperatioanalRadius_null;
    n++;

    // uavInvestigationPayloadType_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavInvestigationPayloadType_value.data ();
    b[n].capacity = i.uavInvestigationPayloadType_value.capacity ();
    b[n].size = &i.uavInvestigationPayloadType_size;
    b[n].is_null = &i.uavInvestigationPayloadType_null;
    n++;

    // uavBombingway_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavBombingway_value.data ();
    b[n].capacity = i.uavBombingway_value.capacity ();
    b[n].size = &i.uavBombingway_size;
    b[n].is_null = &i.uavBombingway_null;
    n++;

    // uavLoadReconnaissanceRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLoadReconnaissanceRangeMin_value;
    b[n].is_null = &i.uavLoadReconnaissanceRangeMin_null;
    n++;

    // uavLoadReconnaissanceRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLoadReconnaissanceRangeMax_value;
    b[n].is_null = &i.uavLoadReconnaissanceRangeMax_null;
    n++;

    // uavLoadReconnaissanceAccuracy_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLoadReconnaissanceAccuracy_value;
    b[n].is_null = &i.uavLoadReconnaissanceAccuracy_null;
    n++;

    // uavRecoveryway_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavRecoveryway_value.data ();
    b[n].capacity = i.uavRecoveryway_value.capacity ();
    b[n].size = &i.uavRecoveryway_size;
    b[n].is_null = &i.uavRecoveryway_null;
    n++;

    // uavLowAltitudeBreakthroughSpeed_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavLowAltitudeBreakthroughSpeed_value;
    b[n].is_null = &i.uavLowAltitudeBreakthroughSpeed_null;
    n++;

    // uavHangingLoctionCapacity_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavHangingLoctionCapacity_value.data ();
    b[n].capacity = i.uavHangingLoctionCapacity_value.capacity ();
    b[n].size = &i.uavHangingLoctionCapacity_size;
    b[n].is_null = &i.uavHangingLoctionCapacity_null;
    n++;

    // uavOperationWay_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavOperationWay_value.data ();
    b[n].capacity = i.uavOperationWay_value.capacity ();
    b[n].size = &i.uavOperationWay_size;
    b[n].is_null = &i.uavOperationWay_null;
    n++;

    // uavAttackaccuracy_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavAttackaccuracy_value;
    b[n].is_null = &i.uavAttackaccuracy_null;
    n++;

    // uavRadarCrossSection_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavRadarCrossSection_value;
    b[n].is_null = &i.uavRadarCrossSection_null;
    n++;

    // uavCenterOfGravityFrontLimit_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavCenterOfGravityFrontLimit_value;
    b[n].is_null = &i.uavCenterOfGravityFrontLimit_null;
    n++;

    // uavCenterOfGravityAfterwardLimit_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavCenterOfGravityAfterwardLimit_value;
    b[n].is_null = &i.uavCenterOfGravityAfterwardLimit_null;
    n++;

    // uavMaximumTakeoffWeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumTakeoffWeight_value;
    b[n].is_null = &i.uavMaximumTakeoffWeight_null;
    n++;

    // uavEmptyWeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavEmptyWeight_value;
    b[n].is_null = &i.uavEmptyWeight_null;
    n++;

    // uavMaximumFuelCapacity_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumFuelCapacity_value;
    b[n].is_null = &i.uavMaximumFuelCapacity_null;
    n++;

    // uavMaximumExternalWeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumExternalWeight_value;
    b[n].is_null = &i.uavMaximumExternalWeight_null;
    n++;

    // uavCeiling_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavCeiling_value;
    b[n].is_null = &i.uavCeiling_null;
    n++;

    // uavMaximumGroundStartingHeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumGroundStartingHeight_value;
    b[n].is_null = &i.uavMaximumGroundStartingHeight_null;
    n++;

    // uavMaximumAirStartingAltitude_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumAirStartingAltitude_value;
    b[n].is_null = &i.uavMaximumAirStartingAltitude_null;
    n++;

    // uavMaximumEndurance_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumEndurance_value;
    b[n].is_null = &i.uavMaximumEndurance_null;
    n++;

    // uavMaximumFlightVacuumSpeed_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMaximumFlightVacuumSpeed_value;
    b[n].is_null = &i.uavMaximumFlightVacuumSpeed_null;
    n++;

    // uavMinimumFlightMeterSpeed_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.uavMinimumFlightMeterSpeed_value;
    b[n].is_null = &i.uavMinimumFlightMeterSpeed_null;
    n++;

    // sealLevelTakeoffAndRollDistance_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.sealLevelTakeoffAndRollDistance_value;
    b[n].is_null = &i.sealLevelTakeoffAndRollDistance_null;
    n++;

    // sealLevelLandingAndRollDistance_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.sealLevelLandingAndRollDistance_value;
    b[n].is_null = &i.sealLevelLandingAndRollDistance_null;
    n++;

    // cruiseAltitudeReconnaissanceConfiguration_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.cruiseAltitudeReconnaissanceConfiguration_value;
    b[n].is_null = &i.cruiseAltitudeReconnaissanceConfiguration_null;
    n++;

    // cruiseAltitudeFullExternalConfiguration_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.cruiseAltitudeFullExternalConfiguration_value;
    b[n].is_null = &i.cruiseAltitudeFullExternalConfiguration_null;
    n++;

    // uavCreatModelTime_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.uavCreatModelTime_value;
    b[n].is_null = &i.uavCreatModelTime_null;
    n++;

    // uavImgName_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavImgName_value.data ();
    b[n].capacity = i.uavImgName_value.capacity ();
    b[n].size = &i.uavImgName_size;
    b[n].is_null = &i.uavImgName_null;
    n++;

    // uavImgUrl_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavImgUrl_value.data ();
    b[n].capacity = i.uavImgUrl_value.capacity ();
    b[n].size = &i.uavImgUrl_size;
    b[n].is_null = &i.uavImgUrl_null;
    n++;
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // uavType_
    //
    {
      ::std::string const& v =
        o.uavType_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavType_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavType_value,
        size,
        is_null,
        v);
      i.uavType_null = is_null;
      i.uavType_size = size;
      grew = grew || (cap != i.uavType_value.capacity ());
    }

    // uavName_
    //
    {
      ::std::string const& v =
        o.uavName_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavName_value,
        size,
        is_null,
        v);
      i.uavName_null = is_null;
      i.uavName_size = size;
      grew = grew || (cap != i.uavName_value.capacity ());
    }

    // uavId_
    //
    {
      ::std::string const& v =
        o.uavId_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavId_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavId_value,
        size,
        is_null,
        v);
      i.uavId_null = is_null;
      i.uavId_size = size;
      grew = grew || (cap != i.uavId_value.capacity ());
    }

    // uavLength_
    //
    {
      float const& v =
        o.uavLength_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLength_value, is_null, v);
      i.uavLength_null = is_null;
    }

    // uavWidth_
    //
    {
      float const& v =
        o.uavWidth_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavWidth_value, is_null, v);
      i.uavWidth_null = is_null;
    }

    // uavHeight_
    //
    {
      float const& v =
        o.uavHeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavHeight_value, is_null, v);
      i.uavHeight_null = is_null;
    }

    // uavLoadAmmoType_
    //
    {
      ::std::string const& v =
        o.uavLoadAmmoType_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavLoadAmmoType_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavLoadAmmoType_value,
        size,
        is_null,
        v);
      i.uavLoadAmmoType_null = is_null;
      i.uavLoadAmmoType_size = size;
      grew = grew || (cap != i.uavLoadAmmoType_value.capacity ());
    }

    // uavFlightHeightRangeMin_
    //
    {
      float const& v =
        o.uavFlightHeightRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightHeightRangeMin_value, is_null, v);
      i.uavFlightHeightRangeMin_null = is_null;
    }

    // uavFlightHeightRangeMax_
    //
    {
      float const& v =
        o.uavFlightHeightRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightHeightRangeMax_value, is_null, v);
      i.uavFlightHeightRangeMax_null = is_null;
    }

    // uavFlightSpeedRangeMin_
    //
    {
      float const& v =
        o.uavFlightSpeedRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightSpeedRangeMin_value, is_null, v);
      i.uavFlightSpeedRangeMin_null = is_null;
    }

    // uavFlightSpeedRangeMax_
    //
    {
      float const& v =
        o.uavFlightSpeedRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightSpeedRangeMax_value, is_null, v);
      i.uavFlightSpeedRangeMax_null = is_null;
    }

    // uavFlightDistanceRangeMin_
    //
    {
      float const& v =
        o.uavFlightDistanceRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightDistanceRangeMin_value, is_null, v);
      i.uavFlightDistanceRangeMin_null = is_null;
    }

    // uavFlightDistanceRangeMax_
    //
    {
      float const& v =
        o.uavFlightDistanceRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightDistanceRangeMax_value, is_null, v);
      i.uavFlightDistanceRangeMax_null = is_null;
    }

    // uavFlightTimeRangeMin_
    //
    {
      float const& v =
        o.uavFlightTimeRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightTimeRangeMin_value, is_null, v);
      i.uavFlightTimeRangeMin_null = is_null;
    }

    // uavFlightTimeRangeMax_
    //
    {
      float const& v =
        o.uavFlightTimeRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavFlightTimeRangeMax_value, is_null, v);
      i.uavFlightTimeRangeMax_null = is_null;
    }

    // uavTakeoffDistance_
    //
    {
      float const& v =
        o.uavTakeoffDistance_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavTakeoffDistance_value, is_null, v);
      i.uavTakeoffDistance_null = is_null;
    }

    // uavLandDistance_
    //
    {
      float const& v =
        o.uavLandDistance_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLandDistance_value, is_null, v);
      i.uavLandDistance_null = is_null;
    }

    // uavTurningRadiusRangeMin_
    //
    {
      float const& v =
        o.uavTurningRadiusRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavTurningRadiusRangeMin_value, is_null, v);
      i.uavTurningRadiusRangeMin_null = is_null;
    }

    // uavTurningRadiusRangeMax_
    //
    {
      float const& v =
        o.uavTurningRadiusRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavTurningRadiusRangeMax_value, is_null, v);
      i.uavTurningRadiusRangeMax_null = is_null;
    }

    // uavOperatioanalRadius_
    //
    {
      float const& v =
        o.uavOperatioanalRadius_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavOperatioanalRadius_value, is_null, v);
      i.uavOperatioanalRadius_null = is_null;
    }

    // uavInvestigationPayloadType_
    //
    {
      ::std::string const& v =
        o.uavInvestigationPayloadType_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavInvestigationPayloadType_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavInvestigationPayloadType_value,
        size,
        is_null,
        v);
      i.uavInvestigationPayloadType_null = is_null;
      i.uavInvestigationPayloadType_size = size;
      grew = grew || (cap != i.uavInvestigationPayloadType_value.capacity ());
    }

    // uavBombingway_
    //
    {
      ::std::string const& v =
        o.uavBombingway_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavBombingway_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavBombingway_value,
        size,
        is_null,
        v);
      i.uavBombingway_null = is_null;
      i.uavBombingway_size = size;
      grew = grew || (cap != i.uavBombingway_value.capacity ());
    }

    // uavLoadReconnaissanceRangeMin_
    //
    {
      float const& v =
        o.uavLoadReconnaissanceRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLoadReconnaissanceRangeMin_value, is_null, v);
      i.uavLoadReconnaissanceRangeMin_null = is_null;
    }

    // uavLoadReconnaissanceRangeMax_
    //
    {
      float const& v =
        o.uavLoadReconnaissanceRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLoadReconnaissanceRangeMax_value, is_null, v);
      i.uavLoadReconnaissanceRangeMax_null = is_null;
    }

    // uavLoadReconnaissanceAccuracy_
    //
    {
      float const& v =
        o.uavLoadReconnaissanceAccuracy_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLoadReconnaissanceAccuracy_value, is_null, v);
      i.uavLoadReconnaissanceAccuracy_null = is_null;
    }

    // uavRecoveryway_
    //
    {
      ::std::string const& v =
        o.uavRecoveryway_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavRecoveryway_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavRecoveryway_value,
        size,
        is_null,
        v);
      i.uavRecoveryway_null = is_null;
      i.uavRecoveryway_size = size;
      grew = grew || (cap != i.uavRecoveryway_value.capacity ());
    }

    // uavLowAltitudeBreakthroughSpeed_
    //
    {
      float const& v =
        o.uavLowAltitudeBreakthroughSpeed_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavLowAltitudeBreakthroughSpeed_value, is_null, v);
      i.uavLowAltitudeBreakthroughSpeed_null = is_null;
    }

    // uavHangingLoctionCapacity_
    //
    {
      ::std::string const& v =
        o.uavHangingLoctionCapacity_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavHangingLoctionCapacity_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavHangingLoctionCapacity_value,
        size,
        is_null,
        v);
      i.uavHangingLoctionCapacity_null = is_null;
      i.uavHangingLoctionCapacity_size = size;
      grew = grew || (cap != i.uavHangingLoctionCapacity_value.capacity ());
    }

    // uavOperationWay_
    //
    {
      ::std::string const& v =
        o.uavOperationWay_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavOperationWay_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavOperationWay_value,
        size,
        is_null,
        v);
      i.uavOperationWay_null = is_null;
      i.uavOperationWay_size = size;
      grew = grew || (cap != i.uavOperationWay_value.capacity ());
    }

    // uavAttackaccuracy_
    //
    {
      float const& v =
        o.uavAttackaccuracy_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavAttackaccuracy_value, is_null, v);
      i.uavAttackaccuracy_null = is_null;
    }

    // uavRadarCrossSection_
    //
    {
      float const& v =
        o.uavRadarCrossSection_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavRadarCrossSection_value, is_null, v);
      i.uavRadarCrossSection_null = is_null;
    }

    // uavCenterOfGravityFrontLimit_
    //
    {
      float const& v =
        o.uavCenterOfGravityFrontLimit_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavCenterOfGravityFrontLimit_value, is_null, v);
      i.uavCenterOfGravityFrontLimit_null = is_null;
    }

    // uavCenterOfGravityAfterwardLimit_
    //
    {
      float const& v =
        o.uavCenterOfGravityAfterwardLimit_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavCenterOfGravityAfterwardLimit_value, is_null, v);
      i.uavCenterOfGravityAfterwardLimit_null = is_null;
    }

    // uavMaximumTakeoffWeight_
    //
    {
      float const& v =
        o.uavMaximumTakeoffWeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumTakeoffWeight_value, is_null, v);
      i.uavMaximumTakeoffWeight_null = is_null;
    }

    // uavEmptyWeight_
    //
    {
      float const& v =
        o.uavEmptyWeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavEmptyWeight_value, is_null, v);
      i.uavEmptyWeight_null = is_null;
    }

    // uavMaximumFuelCapacity_
    //
    {
      float const& v =
        o.uavMaximumFuelCapacity_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumFuelCapacity_value, is_null, v);
      i.uavMaximumFuelCapacity_null = is_null;
    }

    // uavMaximumExternalWeight_
    //
    {
      float const& v =
        o.uavMaximumExternalWeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumExternalWeight_value, is_null, v);
      i.uavMaximumExternalWeight_null = is_null;
    }

    // uavCeiling_
    //
    {
      float const& v =
        o.uavCeiling_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavCeiling_value, is_null, v);
      i.uavCeiling_null = is_null;
    }

    // uavMaximumGroundStartingHeight_
    //
    {
      float const& v =
        o.uavMaximumGroundStartingHeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumGroundStartingHeight_value, is_null, v);
      i.uavMaximumGroundStartingHeight_null = is_null;
    }

    // uavMaximumAirStartingAltitude_
    //
    {
      float const& v =
        o.uavMaximumAirStartingAltitude_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumAirStartingAltitude_value, is_null, v);
      i.uavMaximumAirStartingAltitude_null = is_null;
    }

    // uavMaximumEndurance_
    //
    {
      float const& v =
        o.uavMaximumEndurance_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumEndurance_value, is_null, v);
      i.uavMaximumEndurance_null = is_null;
    }

    // uavMaximumFlightVacuumSpeed_
    //
    {
      float const& v =
        o.uavMaximumFlightVacuumSpeed_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMaximumFlightVacuumSpeed_value, is_null, v);
      i.uavMaximumFlightVacuumSpeed_null = is_null;
    }

    // uavMinimumFlightMeterSpeed_
    //
    {
      float const& v =
        o.uavMinimumFlightMeterSpeed_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.uavMinimumFlightMeterSpeed_value, is_null, v);
      i.uavMinimumFlightMeterSpeed_null = is_null;
    }

    // sealLevelTakeoffAndRollDistance_
    //
    {
      float const& v =
        o.sealLevelTakeoffAndRollDistance_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.sealLevelTakeoffAndRollDistance_value, is_null, v);
      i.sealLevelTakeoffAndRollDistance_null = is_null;
    }

    // sealLevelLandingAndRollDistance_
    //
    {
      float const& v =
        o.sealLevelLandingAndRollDistance_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.sealLevelLandingAndRollDistance_value, is_null, v);
      i.sealLevelLandingAndRollDistance_null = is_null;
    }

    // cruiseAltitudeReconnaissanceConfiguration_
    //
    {
      float const& v =
        o.cruiseAltitudeReconnaissanceConfiguration_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.cruiseAltitudeReconnaissanceConfiguration_value, is_null, v);
      i.cruiseAltitudeReconnaissanceConfiguration_null = is_null;
    }

    // cruiseAltitudeFullExternalConfiguration_
    //
    {
      float const& v =
        o.cruiseAltitudeFullExternalConfiguration_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.cruiseAltitudeFullExternalConfiguration_value, is_null, v);
      i.cruiseAltitudeFullExternalConfiguration_null = is_null;
    }

    // uavCreatModelTime_
    //
    {
      ::QDateTime const& v =
        o.uavCreatModelTime_;

      bool is_null (false);
      pgsql::value_traits<
          ::QDateTime,
          pgsql::id_timestamp >::set_image (
        i.uavCreatModelTime_value, is_null, v);
      i.uavCreatModelTime_null = is_null;
    }

    // uavImgName_
    //
    {
      ::std::string const& v =
        o.uavImgName_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavImgName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavImgName_value,
        size,
        is_null,
        v);
      i.uavImgName_null = is_null;
      i.uavImgName_size = size;
      grew = grew || (cap != i.uavImgName_value.capacity ());
    }

    // uavImgUrl_
    //
    {
      ::std::string const& v =
        o.uavImgUrl_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavImgUrl_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavImgUrl_value,
        size,
        is_null,
        v);
      i.uavImgUrl_null = is_null;
      i.uavImgUrl_size = size;
      grew = grew || (cap != i.uavImgUrl_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long int& v =
        o.id_;

      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // uavType_
    //
    {
      ::std::string& v =
        o.uavType_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavType_value,
        i.uavType_size,
        i.uavType_null);
    }

    // uavName_
    //
    {
      ::std::string& v =
        o.uavName_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavName_value,
        i.uavName_size,
        i.uavName_null);
    }

    // uavId_
    //
    {
      ::std::string& v =
        o.uavId_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavId_value,
        i.uavId_size,
        i.uavId_null);
    }

    // uavLength_
    //
    {
      float& v =
        o.uavLength_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLength_value,
        i.uavLength_null);
    }

    // uavWidth_
    //
    {
      float& v =
        o.uavWidth_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavWidth_value,
        i.uavWidth_null);
    }

    // uavHeight_
    //
    {
      float& v =
        o.uavHeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavHeight_value,
        i.uavHeight_null);
    }

    // uavLoadAmmoType_
    //
    {
      ::std::string& v =
        o.uavLoadAmmoType_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavLoadAmmoType_value,
        i.uavLoadAmmoType_size,
        i.uavLoadAmmoType_null);
    }

    // uavFlightHeightRangeMin_
    //
    {
      float& v =
        o.uavFlightHeightRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightHeightRangeMin_value,
        i.uavFlightHeightRangeMin_null);
    }

    // uavFlightHeightRangeMax_
    //
    {
      float& v =
        o.uavFlightHeightRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightHeightRangeMax_value,
        i.uavFlightHeightRangeMax_null);
    }

    // uavFlightSpeedRangeMin_
    //
    {
      float& v =
        o.uavFlightSpeedRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightSpeedRangeMin_value,
        i.uavFlightSpeedRangeMin_null);
    }

    // uavFlightSpeedRangeMax_
    //
    {
      float& v =
        o.uavFlightSpeedRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightSpeedRangeMax_value,
        i.uavFlightSpeedRangeMax_null);
    }

    // uavFlightDistanceRangeMin_
    //
    {
      float& v =
        o.uavFlightDistanceRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightDistanceRangeMin_value,
        i.uavFlightDistanceRangeMin_null);
    }

    // uavFlightDistanceRangeMax_
    //
    {
      float& v =
        o.uavFlightDistanceRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightDistanceRangeMax_value,
        i.uavFlightDistanceRangeMax_null);
    }

    // uavFlightTimeRangeMin_
    //
    {
      float& v =
        o.uavFlightTimeRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightTimeRangeMin_value,
        i.uavFlightTimeRangeMin_null);
    }

    // uavFlightTimeRangeMax_
    //
    {
      float& v =
        o.uavFlightTimeRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavFlightTimeRangeMax_value,
        i.uavFlightTimeRangeMax_null);
    }

    // uavTakeoffDistance_
    //
    {
      float& v =
        o.uavTakeoffDistance_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavTakeoffDistance_value,
        i.uavTakeoffDistance_null);
    }

    // uavLandDistance_
    //
    {
      float& v =
        o.uavLandDistance_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLandDistance_value,
        i.uavLandDistance_null);
    }

    // uavTurningRadiusRangeMin_
    //
    {
      float& v =
        o.uavTurningRadiusRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavTurningRadiusRangeMin_value,
        i.uavTurningRadiusRangeMin_null);
    }

    // uavTurningRadiusRangeMax_
    //
    {
      float& v =
        o.uavTurningRadiusRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavTurningRadiusRangeMax_value,
        i.uavTurningRadiusRangeMax_null);
    }

    // uavOperatioanalRadius_
    //
    {
      float& v =
        o.uavOperatioanalRadius_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavOperatioanalRadius_value,
        i.uavOperatioanalRadius_null);
    }

    // uavInvestigationPayloadType_
    //
    {
      ::std::string& v =
        o.uavInvestigationPayloadType_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavInvestigationPayloadType_value,
        i.uavInvestigationPayloadType_size,
        i.uavInvestigationPayloadType_null);
    }

    // uavBombingway_
    //
    {
      ::std::string& v =
        o.uavBombingway_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavBombingway_value,
        i.uavBombingway_size,
        i.uavBombingway_null);
    }

    // uavLoadReconnaissanceRangeMin_
    //
    {
      float& v =
        o.uavLoadReconnaissanceRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLoadReconnaissanceRangeMin_value,
        i.uavLoadReconnaissanceRangeMin_null);
    }

    // uavLoadReconnaissanceRangeMax_
    //
    {
      float& v =
        o.uavLoadReconnaissanceRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLoadReconnaissanceRangeMax_value,
        i.uavLoadReconnaissanceRangeMax_null);
    }

    // uavLoadReconnaissanceAccuracy_
    //
    {
      float& v =
        o.uavLoadReconnaissanceAccuracy_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLoadReconnaissanceAccuracy_value,
        i.uavLoadReconnaissanceAccuracy_null);
    }

    // uavRecoveryway_
    //
    {
      ::std::string& v =
        o.uavRecoveryway_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavRecoveryway_value,
        i.uavRecoveryway_size,
        i.uavRecoveryway_null);
    }

    // uavLowAltitudeBreakthroughSpeed_
    //
    {
      float& v =
        o.uavLowAltitudeBreakthroughSpeed_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavLowAltitudeBreakthroughSpeed_value,
        i.uavLowAltitudeBreakthroughSpeed_null);
    }

    // uavHangingLoctionCapacity_
    //
    {
      ::std::string& v =
        o.uavHangingLoctionCapacity_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavHangingLoctionCapacity_value,
        i.uavHangingLoctionCapacity_size,
        i.uavHangingLoctionCapacity_null);
    }

    // uavOperationWay_
    //
    {
      ::std::string& v =
        o.uavOperationWay_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavOperationWay_value,
        i.uavOperationWay_size,
        i.uavOperationWay_null);
    }

    // uavAttackaccuracy_
    //
    {
      float& v =
        o.uavAttackaccuracy_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavAttackaccuracy_value,
        i.uavAttackaccuracy_null);
    }

    // uavRadarCrossSection_
    //
    {
      float& v =
        o.uavRadarCrossSection_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavRadarCrossSection_value,
        i.uavRadarCrossSection_null);
    }

    // uavCenterOfGravityFrontLimit_
    //
    {
      float& v =
        o.uavCenterOfGravityFrontLimit_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavCenterOfGravityFrontLimit_value,
        i.uavCenterOfGravityFrontLimit_null);
    }

    // uavCenterOfGravityAfterwardLimit_
    //
    {
      float& v =
        o.uavCenterOfGravityAfterwardLimit_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavCenterOfGravityAfterwardLimit_value,
        i.uavCenterOfGravityAfterwardLimit_null);
    }

    // uavMaximumTakeoffWeight_
    //
    {
      float& v =
        o.uavMaximumTakeoffWeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumTakeoffWeight_value,
        i.uavMaximumTakeoffWeight_null);
    }

    // uavEmptyWeight_
    //
    {
      float& v =
        o.uavEmptyWeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavEmptyWeight_value,
        i.uavEmptyWeight_null);
    }

    // uavMaximumFuelCapacity_
    //
    {
      float& v =
        o.uavMaximumFuelCapacity_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumFuelCapacity_value,
        i.uavMaximumFuelCapacity_null);
    }

    // uavMaximumExternalWeight_
    //
    {
      float& v =
        o.uavMaximumExternalWeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumExternalWeight_value,
        i.uavMaximumExternalWeight_null);
    }

    // uavCeiling_
    //
    {
      float& v =
        o.uavCeiling_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavCeiling_value,
        i.uavCeiling_null);
    }

    // uavMaximumGroundStartingHeight_
    //
    {
      float& v =
        o.uavMaximumGroundStartingHeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumGroundStartingHeight_value,
        i.uavMaximumGroundStartingHeight_null);
    }

    // uavMaximumAirStartingAltitude_
    //
    {
      float& v =
        o.uavMaximumAirStartingAltitude_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumAirStartingAltitude_value,
        i.uavMaximumAirStartingAltitude_null);
    }

    // uavMaximumEndurance_
    //
    {
      float& v =
        o.uavMaximumEndurance_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumEndurance_value,
        i.uavMaximumEndurance_null);
    }

    // uavMaximumFlightVacuumSpeed_
    //
    {
      float& v =
        o.uavMaximumFlightVacuumSpeed_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMaximumFlightVacuumSpeed_value,
        i.uavMaximumFlightVacuumSpeed_null);
    }

    // uavMinimumFlightMeterSpeed_
    //
    {
      float& v =
        o.uavMinimumFlightMeterSpeed_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.uavMinimumFlightMeterSpeed_value,
        i.uavMinimumFlightMeterSpeed_null);
    }

    // sealLevelTakeoffAndRollDistance_
    //
    {
      float& v =
        o.sealLevelTakeoffAndRollDistance_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.sealLevelTakeoffAndRollDistance_value,
        i.sealLevelTakeoffAndRollDistance_null);
    }

    // sealLevelLandingAndRollDistance_
    //
    {
      float& v =
        o.sealLevelLandingAndRollDistance_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.sealLevelLandingAndRollDistance_value,
        i.sealLevelLandingAndRollDistance_null);
    }

    // cruiseAltitudeReconnaissanceConfiguration_
    //
    {
      float& v =
        o.cruiseAltitudeReconnaissanceConfiguration_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.cruiseAltitudeReconnaissanceConfiguration_value,
        i.cruiseAltitudeReconnaissanceConfiguration_null);
    }

    // cruiseAltitudeFullExternalConfiguration_
    //
    {
      float& v =
        o.cruiseAltitudeFullExternalConfiguration_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.cruiseAltitudeFullExternalConfiguration_value,
        i.cruiseAltitudeFullExternalConfiguration_null);
    }

    // uavCreatModelTime_
    //
    {
      ::QDateTime& v =
        o.uavCreatModelTime_;

      pgsql::value_traits<
          ::QDateTime,
          pgsql::id_timestamp >::set_value (
        v,
        i.uavCreatModelTime_value,
        i.uavCreatModelTime_null);
    }

    // uavImgName_
    //
    {
      ::std::string& v =
        o.uavImgName_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavImgName_value,
        i.uavImgName_size,
        i.uavImgName_null);
    }

    // uavImgUrl_
    //
    {
      ::std::string& v =
        o.uavImgUrl_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavImgUrl_value,
        i.uavImgUrl_size,
        i.uavImgUrl_null);
    }
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::persist_statement[] =
  "INSERT INTO \"uav_type_man\".\"uav_models_data\" "
  "(\"id\", "
  "\"uav_type\", "
  "\"uav_name\", "
  "\"uav_id\", "
  "\"length\", "
  "\"width\", "
  "\"height\", "
  "\"load_ammo_type\", "
  "\"flight_height_min\", "
  "\"flight_height_max\", "
  "\"flight_speed_min\", "
  "\"flight_speed_max\", "
  "\"flight_distance_min\", "
  "\"flight_distance_max\", "
  "\"flight_time_min\", "
  "\"flight_time_max\", "
  "\"takeoff_distance\", "
  "\"landing_distance\", "
  "\"turn_radius_min\", "
  "\"turn_radius_max\", "
  "\"combat_radius\", "
  "\"payload_type\", "
  "\"bomb_way\", "
  "\"recon_range_min\", "
  "\"recon_range_max\", "
  "\"recon_accuracy\", "
  "\"recovery_way\", "
  "\"low_alt_speed\", "
  "\"hanging_capacity\", "
  "\"operation_way\", "
  "\"attack_accuracy\", "
  "\"rcs\", "
  "\"cg_front_limit\", "
  "\"cg_rear_limit\", "
  "\"max_takeoff_weight\", "
  "\"empty_weight\", "
  "\"max_fuel\", "
  "\"max_external_weight\", "
  "\"ceiling\", "
  "\"ground_start_alt\", "
  "\"air_start_alt\", "
  "\"endurance\", "
  "\"max_vacuum_speed\", "
  "\"min_meter_speed\", "
  "\"sea_takeoff_roll\", "
  "\"sea_landing_roll\", "
  "\"recon_cruise_alt\", "
  "\"full_external_cruise_alt\", "
  "\"recordcreation_time\", "
  "\"image_name\", "
  "\"image_url\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::find_statement[] =
  "SELECT "
  "\"uav_type_man\".\"uav_models_data\".\"id\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_name\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_id\", "
  "\"uav_type_man\".\"uav_models_data\".\"length\", "
  "\"uav_type_man\".\"uav_models_data\".\"width\", "
  "\"uav_type_man\".\"uav_models_data\".\"height\", "
  "\"uav_type_man\".\"uav_models_data\".\"load_ammo_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_height_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_height_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_speed_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_speed_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_distance_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_distance_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_time_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_time_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"takeoff_distance\", "
  "\"uav_type_man\".\"uav_models_data\".\"landing_distance\", "
  "\"uav_type_man\".\"uav_models_data\".\"turn_radius_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"turn_radius_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"combat_radius\", "
  "\"uav_type_man\".\"uav_models_data\".\"payload_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"bomb_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_range_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_range_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_accuracy\", "
  "\"uav_type_man\".\"uav_models_data\".\"recovery_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"low_alt_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"hanging_capacity\", "
  "\"uav_type_man\".\"uav_models_data\".\"operation_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"attack_accuracy\", "
  "\"uav_type_man\".\"uav_models_data\".\"rcs\", "
  "\"uav_type_man\".\"uav_models_data\".\"cg_front_limit\", "
  "\"uav_type_man\".\"uav_models_data\".\"cg_rear_limit\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_takeoff_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"empty_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_fuel\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_external_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"ceiling\", "
  "\"uav_type_man\".\"uav_models_data\".\"ground_start_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"air_start_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"endurance\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_vacuum_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"min_meter_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"sea_takeoff_roll\", "
  "\"uav_type_man\".\"uav_models_data\".\"sea_landing_roll\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_cruise_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"full_external_cruise_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"recordcreation_time\", "
  "\"uav_type_man\".\"uav_models_data\".\"image_name\", "
  "\"uav_type_man\".\"uav_models_data\".\"image_url\" "
  "FROM \"uav_type_man\".\"uav_models_data\" "
  "WHERE \"uav_type_man\".\"uav_models_data\".\"id\"=$1";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::update_statement[] =
  "UPDATE \"uav_type_man\".\"uav_models_data\" "
  "SET "
  "\"uav_type\"=$1, "
  "\"uav_name\"=$2, "
  "\"uav_id\"=$3, "
  "\"length\"=$4, "
  "\"width\"=$5, "
  "\"height\"=$6, "
  "\"load_ammo_type\"=$7, "
  "\"flight_height_min\"=$8, "
  "\"flight_height_max\"=$9, "
  "\"flight_speed_min\"=$10, "
  "\"flight_speed_max\"=$11, "
  "\"flight_distance_min\"=$12, "
  "\"flight_distance_max\"=$13, "
  "\"flight_time_min\"=$14, "
  "\"flight_time_max\"=$15, "
  "\"takeoff_distance\"=$16, "
  "\"landing_distance\"=$17, "
  "\"turn_radius_min\"=$18, "
  "\"turn_radius_max\"=$19, "
  "\"combat_radius\"=$20, "
  "\"payload_type\"=$21, "
  "\"bomb_way\"=$22, "
  "\"recon_range_min\"=$23, "
  "\"recon_range_max\"=$24, "
  "\"recon_accuracy\"=$25, "
  "\"recovery_way\"=$26, "
  "\"low_alt_speed\"=$27, "
  "\"hanging_capacity\"=$28, "
  "\"operation_way\"=$29, "
  "\"attack_accuracy\"=$30, "
  "\"rcs\"=$31, "
  "\"cg_front_limit\"=$32, "
  "\"cg_rear_limit\"=$33, "
  "\"max_takeoff_weight\"=$34, "
  "\"empty_weight\"=$35, "
  "\"max_fuel\"=$36, "
  "\"max_external_weight\"=$37, "
  "\"ceiling\"=$38, "
  "\"ground_start_alt\"=$39, "
  "\"air_start_alt\"=$40, "
  "\"endurance\"=$41, "
  "\"max_vacuum_speed\"=$42, "
  "\"min_meter_speed\"=$43, "
  "\"sea_takeoff_roll\"=$44, "
  "\"sea_landing_roll\"=$45, "
  "\"recon_cruise_alt\"=$46, "
  "\"full_external_cruise_alt\"=$47, "
  "\"recordcreation_time\"=$48, "
  "\"image_name\"=$49, "
  "\"image_url\"=$50 "
  "WHERE \"id\"=$51";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::erase_statement[] =
  "DELETE FROM \"uav_type_man\".\"uav_models_data\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::query_statement[] =
  "SELECT "
  "\"uav_type_man\".\"uav_models_data\".\"id\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_name\", "
  "\"uav_type_man\".\"uav_models_data\".\"uav_id\", "
  "\"uav_type_man\".\"uav_models_data\".\"length\", "
  "\"uav_type_man\".\"uav_models_data\".\"width\", "
  "\"uav_type_man\".\"uav_models_data\".\"height\", "
  "\"uav_type_man\".\"uav_models_data\".\"load_ammo_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_height_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_height_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_speed_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_speed_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_distance_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_distance_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_time_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"flight_time_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"takeoff_distance\", "
  "\"uav_type_man\".\"uav_models_data\".\"landing_distance\", "
  "\"uav_type_man\".\"uav_models_data\".\"turn_radius_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"turn_radius_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"combat_radius\", "
  "\"uav_type_man\".\"uav_models_data\".\"payload_type\", "
  "\"uav_type_man\".\"uav_models_data\".\"bomb_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_range_min\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_range_max\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_accuracy\", "
  "\"uav_type_man\".\"uav_models_data\".\"recovery_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"low_alt_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"hanging_capacity\", "
  "\"uav_type_man\".\"uav_models_data\".\"operation_way\", "
  "\"uav_type_man\".\"uav_models_data\".\"attack_accuracy\", "
  "\"uav_type_man\".\"uav_models_data\".\"rcs\", "
  "\"uav_type_man\".\"uav_models_data\".\"cg_front_limit\", "
  "\"uav_type_man\".\"uav_models_data\".\"cg_rear_limit\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_takeoff_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"empty_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_fuel\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_external_weight\", "
  "\"uav_type_man\".\"uav_models_data\".\"ceiling\", "
  "\"uav_type_man\".\"uav_models_data\".\"ground_start_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"air_start_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"endurance\", "
  "\"uav_type_man\".\"uav_models_data\".\"max_vacuum_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"min_meter_speed\", "
  "\"uav_type_man\".\"uav_models_data\".\"sea_takeoff_roll\", "
  "\"uav_type_man\".\"uav_models_data\".\"sea_landing_roll\", "
  "\"uav_type_man\".\"uav_models_data\".\"recon_cruise_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"full_external_cruise_alt\", "
  "\"uav_type_man\".\"uav_models_data\".\"recordcreation_time\", "
  "\"uav_type_man\".\"uav_models_data\".\"image_name\", "
  "\"uav_type_man\".\"uav_models_data\".\"image_url\" "
  "FROM \"uav_type_man\".\"uav_models_data\"";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"uav_type_man\".\"uav_models_data\"";

  const char access::object_traits_impl< ::UavModelEntity, id_pgsql >::table_name[] =
  "\"uav_type_man\".\"uav_models_data\"";

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::UavModelEntity, id_pgsql >::pointer_type
  access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::UavModelEntity, id_pgsql >::object_type >
  access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::UavModelEntity, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
