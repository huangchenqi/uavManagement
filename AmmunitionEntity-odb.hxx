// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef AMMUNITION_ENTITY_ODB_HXX
#define AMMUNITION_ENTITY_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "AmmunitionEntity.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // AmmunitionEntity
  //
  template <>
  struct class_traits< ::AmmunitionEntity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::AmmunitionEntity >
  {
    public:
    typedef ::AmmunitionEntity object_type;
    typedef ::AmmunitionEntity* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // AmmunitionEntity
  //
  template <typename A>
  struct query_columns< ::AmmunitionEntity, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // ammoType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammoType_type_;

    static const ammoType_type_ ammoType;

    // ammoName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammoName_type_;

    static const ammoName_type_ ammoName;

    // ammoId
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammoId_type_;

    static const ammoId_type_ ammoId;

    // ammoToUavModel
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammoToUavModel_type_;

    static const ammoToUavModel_type_ ammoToUavModel;

    // ammoLength
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammoLength_type_;

    static const ammoLength_type_ ammoLength;

    // ammoWidth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammoWidth_type_;

    static const ammoWidth_type_ ammoWidth;

    // ammoWeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammoWeight_type_;

    static const ammoWeight_type_ ammoWeight;

    // guidanceType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    guidanceType_type_;

    static const guidanceType_type_ guidanceType;

    // launchHeightMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    launchHeightMin_type_;

    static const launchHeightMin_type_ launchHeightMin;

    // launchHeightMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    launchHeightMax_type_;

    static const launchHeightMax_type_ launchHeightMax;

    // launchDistanceMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    launchDistanceMin_type_;

    static const launchDistanceMin_type_ launchDistanceMin;

    // launchDistanceMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    launchDistanceMax_type_;

    static const launchDistanceMax_type_ launchDistanceMax;

    // launchAngle
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    launchAngle_type_;

    static const launchAngle_type_ launchAngle;

    // launchWay
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    launchWay_type_;

    static const launchWay_type_ launchWay;

    // approveAttackTargetType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    approveAttackTargetType_type_;

    static const approveAttackTargetType_type_ approveAttackTargetType;

    // killingDose
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingDose_type_;

    static const killingDose_type_ killingDose;

    // killingMethod
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    killingMethod_type_;

    static const killingMethod_type_ killingMethod;

    // killingDepth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingDepth_type_;

    static const killingDepth_type_ killingDepth;

    // killingRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingRangeMin_type_;

    static const killingRangeMin_type_ killingRangeMin;

    // killingRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingRangeMax_type_;

    static const killingRangeMax_type_ killingRangeMax;

    // recordCreationTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDateTime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    recordCreationTime_type_;

    static const recordCreationTime_type_ recordCreationTime;

    // ammoImgUrl
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammoImgUrl_type_;

    static const ammoImgUrl_type_ ammoImgUrl;

    // ammoImageName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammoImageName_type_;

    static const ammoImageName_type_ ammoImageName;
  };

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::id_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoType (A::table_name, "\"ammo_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoName_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoName (A::table_name, "\"ammo_name\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoId_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoId (A::table_name, "\"ammo_id\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoToUavModel_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoToUavModel (A::table_name, "\"ammo_to_uavmodel\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoLength_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoLength (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoWidth_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoWidth (A::table_name, "\"width\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoWeight_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoWeight (A::table_name, "\"weight\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::guidanceType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  guidanceType (A::table_name, "\"guidance_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchHeightMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchHeightMin (A::table_name, "\"launch_height_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchHeightMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchHeightMax (A::table_name, "\"launch_height_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchDistanceMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchDistanceMin (A::table_name, "\"launch_distance_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchDistanceMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchDistanceMax (A::table_name, "\"launch_distance_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchAngle_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchAngle (A::table_name, "\"launch_angle\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::launchWay_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  launchWay (A::table_name, "\"launch_method\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::approveAttackTargetType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  approveAttackTargetType (A::table_name, "\"approve_attack_target_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingDose_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingDose (A::table_name, "\"killing_dose\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingMethod_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingMethod (A::table_name, "\"killing_method\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingDepth_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingDepth (A::table_name, "\"killing_depth\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingRangeMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingRangeMin (A::table_name, "\"killing_range_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingRangeMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingRangeMax (A::table_name, "\"killing_range_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::recordCreationTime_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  recordCreationTime (A::table_name, "\"recordcreation_time\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoImgUrl_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoImgUrl (A::table_name, "\"image_url\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammoImageName_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammoImageName (A::table_name, "\"image_name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::AmmunitionEntity, id_pgsql, A >:
    query_columns< ::AmmunitionEntity, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::AmmunitionEntity, id_pgsql >:
    public access::object_traits< ::AmmunitionEntity >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // ammoType_
      //
      details::buffer ammoType_value;
      std::size_t ammoType_size;
      bool ammoType_null;

      // ammoName_
      //
      details::buffer ammoName_value;
      std::size_t ammoName_size;
      bool ammoName_null;

      // ammoId_
      //
      details::buffer ammoId_value;
      std::size_t ammoId_size;
      bool ammoId_null;

      // ammoToUavModel_
      //
      details::buffer ammoToUavModel_value;
      std::size_t ammoToUavModel_size;
      bool ammoToUavModel_null;

      // ammoLength_
      //
      float ammoLength_value;
      bool ammoLength_null;

      // ammoWidth_
      //
      float ammoWidth_value;
      bool ammoWidth_null;

      // ammoWeight_
      //
      float ammoWeight_value;
      bool ammoWeight_null;

      // guidanceType_
      //
      details::buffer guidanceType_value;
      std::size_t guidanceType_size;
      bool guidanceType_null;

      // launchHeightMin_
      //
      float launchHeightMin_value;
      bool launchHeightMin_null;

      // launchHeightMax_
      //
      float launchHeightMax_value;
      bool launchHeightMax_null;

      // launchDistanceMin_
      //
      float launchDistanceMin_value;
      bool launchDistanceMin_null;

      // launchDistanceMax_
      //
      float launchDistanceMax_value;
      bool launchDistanceMax_null;

      // launchAngle_
      //
      float launchAngle_value;
      bool launchAngle_null;

      // launchWay_
      //
      details::buffer launchWay_value;
      std::size_t launchWay_size;
      bool launchWay_null;

      // approveAttackTargetType_
      //
      details::buffer approveAttackTargetType_value;
      std::size_t approveAttackTargetType_size;
      bool approveAttackTargetType_null;

      // killingDose_
      //
      float killingDose_value;
      bool killingDose_null;

      // killingMethod_
      //
      details::buffer killingMethod_value;
      std::size_t killingMethod_size;
      bool killingMethod_null;

      // killingDepth_
      //
      float killingDepth_value;
      bool killingDepth_null;

      // killingRangeMin_
      //
      float killingRangeMin_value;
      bool killingRangeMin_null;

      // killingRangeMax_
      //
      float killingRangeMax_value;
      bool killingRangeMax_null;

      // recordCreationTime_
      //
      unsigned long long recordCreationTime_value;
      bool recordCreationTime_null;

      // ammoImgUrl_
      //
      details::buffer ammoImgUrl_value;
      std::size_t ammoImgUrl_size;
      bool ammoImgUrl_null;

      // ammoImageName_
      //
      float ammoImageName_value;
      bool ammoImageName_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 24UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::AmmunitionEntity, id_common >:
    public access::object_traits_impl< ::AmmunitionEntity, id_pgsql >
  {
  };

  // AmmunitionEntity
  //
}

#include "AmmunitionEntity-odb.ixx"

#include <odb/post.hxx>

#endif // AMMUNITION_ENTITY_ODB_HXX
