// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef AMMUNITION_ENTITY_ODB_HXX
#define AMMUNITION_ENTITY_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "AmmunitionEntity.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // AmmunitionEntity
  //
  template <>
  struct class_traits< ::AmmunitionEntity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::AmmunitionEntity >
  {
    public:
    typedef ::AmmunitionEntity object_type;
    typedef ::AmmunitionEntity* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // AmmunitionEntity
  //
  template <typename A>
  struct query_columns< ::AmmunitionEntity, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // ammunitionType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammunitionType_type_;

    static const ammunitionType_type_ ammunitionType;

    // ammunitionName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammunitionName_type_;

    static const ammunitionName_type_ ammunitionName;

    // ammunitionId
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammunitionId_type_;

    static const ammunitionId_type_ ammunitionId;

    // ammunitionLength
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammunitionLength_type_;

    static const ammunitionLength_type_ ammunitionLength;

    // ammunitionWidth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammunitionWidth_type_;

    static const ammunitionWidth_type_ ammunitionWidth;

    // ammunitionWeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    ammunitionWeight_type_;

    static const ammunitionWeight_type_ ammunitionWeight;

    // guidanceType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    guidanceType_type_;

    static const guidanceType_type_ guidanceType;

    // placementHeightMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    placementHeightMin_type_;

    static const placementHeightMin_type_ placementHeightMin;

    // placementHeightMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    placementHeightMax_type_;

    static const placementHeightMax_type_ placementHeightMax;

    // placementDistanceMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    placementDistanceMin_type_;

    static const placementDistanceMin_type_ placementDistanceMin;

    // placementDistanceMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    placementDistanceMax_type_;

    static const placementDistanceMax_type_ placementDistanceMax;

    // projectionAngle
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    projectionAngle_type_;

    static const projectionAngle_type_ projectionAngle;

    // deliveryMethod
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    deliveryMethod_type_;

    static const deliveryMethod_type_ deliveryMethod;

    // attackTargetType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    attackTargetType_type_;

    static const attackTargetType_type_ attackTargetType;

    // lethalDose
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    lethalDose_type_;

    static const lethalDose_type_ lethalDose;

    // killingMethod
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingMethod_type_;

    static const killingMethod_type_ killingMethod;

    // damageDepth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    damageDepth_type_;

    static const damageDepth_type_ damageDepth;

    // killingRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingRangeMin_type_;

    static const killingRangeMin_type_ killingRangeMin;

    // killingRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    killingRangeMax_type_;

    static const killingRangeMax_type_ killingRangeMax;

    // ammunitionCreatModelTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    ammunitionCreatModelTime_type_;

    static const ammunitionCreatModelTime_type_ ammunitionCreatModelTime;

    // uavImgUrl
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavImgUrl_type_;

    static const uavImgUrl_type_ uavImgUrl;

    // imageName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    imageName_type_;

    static const imageName_type_ imageName;
  };

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::id_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionType (A::table_name, "\"ammunition_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionName_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionName (A::table_name, "\"ammunition_name\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionId_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionId (A::table_name, "\"ammunition_id\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionLength_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionLength (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionWidth_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionWidth (A::table_name, "\"width\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionWeight_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionWeight (A::table_name, "\"weight\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::guidanceType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  guidanceType (A::table_name, "\"guidance_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::placementHeightMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  placementHeightMin (A::table_name, "\"placement_height_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::placementHeightMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  placementHeightMax (A::table_name, "\"placement_height_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::placementDistanceMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  placementDistanceMin (A::table_name, "\"placement_distance_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::placementDistanceMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  placementDistanceMax (A::table_name, "\"placement_distance_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::projectionAngle_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  projectionAngle (A::table_name, "\"projection_angle\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::deliveryMethod_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  deliveryMethod (A::table_name, "\"delivery_method\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::attackTargetType_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  attackTargetType (A::table_name, "\"attack_target_type\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::lethalDose_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  lethalDose (A::table_name, "\"lethal_dose\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingMethod_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingMethod (A::table_name, "\"killing_method\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::damageDepth_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  damageDepth (A::table_name, "\"damage_depth\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingRangeMin_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingRangeMin (A::table_name, "\"killing_range_min\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::killingRangeMax_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  killingRangeMax (A::table_name, "\"killing_range_max\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::ammunitionCreatModelTime_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  ammunitionCreatModelTime (A::table_name, "\"create_time\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::uavImgUrl_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  uavImgUrl (A::table_name, "\"image_url\"", 0);

  template <typename A>
  const typename query_columns< ::AmmunitionEntity, id_pgsql, A >::imageName_type_
  query_columns< ::AmmunitionEntity, id_pgsql, A >::
  imageName (A::table_name, "\"image_name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::AmmunitionEntity, id_pgsql, A >:
    query_columns< ::AmmunitionEntity, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::AmmunitionEntity, id_pgsql >:
    public access::object_traits< ::AmmunitionEntity >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // ammunitionType_
      //
      details::buffer ammunitionType_value;
      std::size_t ammunitionType_size;
      bool ammunitionType_null;

      // ammunitionName_
      //
      details::buffer ammunitionName_value;
      std::size_t ammunitionName_size;
      bool ammunitionName_null;

      // ammunitionId_
      //
      details::buffer ammunitionId_value;
      std::size_t ammunitionId_size;
      bool ammunitionId_null;

      // ammunitionLength_
      //
      float ammunitionLength_value;
      bool ammunitionLength_null;

      // ammunitionWidth_
      //
      float ammunitionWidth_value;
      bool ammunitionWidth_null;

      // ammunitionWeight_
      //
      float ammunitionWeight_value;
      bool ammunitionWeight_null;

      // guidanceType_
      //
      details::buffer guidanceType_value;
      std::size_t guidanceType_size;
      bool guidanceType_null;

      // placementHeightMin_
      //
      float placementHeightMin_value;
      bool placementHeightMin_null;

      // placementHeightMax_
      //
      float placementHeightMax_value;
      bool placementHeightMax_null;

      // placementDistanceMin_
      //
      float placementDistanceMin_value;
      bool placementDistanceMin_null;

      // placementDistanceMax_
      //
      float placementDistanceMax_value;
      bool placementDistanceMax_null;

      // projectionAngle_
      //
      float projectionAngle_value;
      bool projectionAngle_null;

      // deliveryMethod_
      //
      float deliveryMethod_value;
      bool deliveryMethod_null;

      // attackTargetType_
      //
      float attackTargetType_value;
      bool attackTargetType_null;

      // lethalDose_
      //
      float lethalDose_value;
      bool lethalDose_null;

      // killingMethod_
      //
      float killingMethod_value;
      bool killingMethod_null;

      // damageDepth_
      //
      float damageDepth_value;
      bool damageDepth_null;

      // killingRangeMin_
      //
      float killingRangeMin_value;
      bool killingRangeMin_null;

      // killingRangeMax_
      //
      float killingRangeMax_value;
      bool killingRangeMax_null;

      // ammunitionCreatModelTime_
      //
      details::buffer ammunitionCreatModelTime_value;
      std::size_t ammunitionCreatModelTime_size;
      bool ammunitionCreatModelTime_null;

      // uavImgUrl_
      //
      details::buffer uavImgUrl_value;
      std::size_t uavImgUrl_size;
      bool uavImgUrl_null;

      // imageName_
      //
      float imageName_value;
      bool imageName_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 23UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::AmmunitionEntity, id_common >:
    public access::object_traits_impl< ::AmmunitionEntity, id_pgsql >
  {
  };

  // AmmunitionEntity
  //
}

#include "AmmunitionEntity-odb.ixx"

#include <odb/post.hxx>

#endif // AMMUNITION_ENTITY_ODB_HXX
