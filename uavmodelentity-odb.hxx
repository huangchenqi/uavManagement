// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef UAVMODELENTITY_ODB_HXX
#define UAVMODELENTITY_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "uavmodelentity.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // UavModelEntity
  //
  template <>
  struct class_traits< ::UavModelEntity >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::UavModelEntity >
  {
    public:
    typedef ::UavModelEntity object_type;
    typedef ::UavModelEntity* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // UavModelEntity
  //
  template <typename A>
  struct query_columns< ::UavModelEntity, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // uavType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavType_type_;

    static const uavType_type_ uavType;

    // uavName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavName_type_;

    static const uavName_type_ uavName;

    // uavId
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavId_type_;

    static const uavId_type_ uavId;

    // uavLength
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLength_type_;

    static const uavLength_type_ uavLength;

    // uavWidth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavWidth_type_;

    static const uavWidth_type_ uavWidth;

    // uavHeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavHeight_type_;

    static const uavHeight_type_ uavHeight;

    // uavInvisibility
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavInvisibility_type_;

    static const uavInvisibility_type_ uavInvisibility;

    // uavFlightHeightRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightHeightRangeMin_type_;

    static const uavFlightHeightRangeMin_type_ uavFlightHeightRangeMin;

    // uavFlightHeightRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightHeightRangeMax_type_;

    static const uavFlightHeightRangeMax_type_ uavFlightHeightRangeMax;

    // uavFlightSpeedRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightSpeedRangeMin_type_;

    static const uavFlightSpeedRangeMin_type_ uavFlightSpeedRangeMin;

    // uavFlightSpeedRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightSpeedRangeMax_type_;

    static const uavFlightSpeedRangeMax_type_ uavFlightSpeedRangeMax;

    // uavFlightDistanceRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightDistanceRangeMin_type_;

    static const uavFlightDistanceRangeMin_type_ uavFlightDistanceRangeMin;

    // uavFlightDistanceRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightDistanceRangeMax_type_;

    static const uavFlightDistanceRangeMax_type_ uavFlightDistanceRangeMax;

    // uavFlightTimeRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightTimeRangeMin_type_;

    static const uavFlightTimeRangeMin_type_ uavFlightTimeRangeMin;

    // uavFlightTimeRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavFlightTimeRangeMax_type_;

    static const uavFlightTimeRangeMax_type_ uavFlightTimeRangeMax;

    // uavTakeoffDistance
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavTakeoffDistance_type_;

    static const uavTakeoffDistance_type_ uavTakeoffDistance;

    // uavLandDistance
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLandDistance_type_;

    static const uavLandDistance_type_ uavLandDistance;

    // uavTurningRadiusRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavTurningRadiusRangeMin_type_;

    static const uavTurningRadiusRangeMin_type_ uavTurningRadiusRangeMin;

    // uavTurningRadiusRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavTurningRadiusRangeMax_type_;

    static const uavTurningRadiusRangeMax_type_ uavTurningRadiusRangeMax;

    // uavOperatioanalRadius
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavOperatioanalRadius_type_;

    static const uavOperatioanalRadius_type_ uavOperatioanalRadius;

    // uavInvestigationPayloadType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavInvestigationPayloadType_type_;

    static const uavInvestigationPayloadType_type_ uavInvestigationPayloadType;

    // uavBombingway
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavBombingway_type_;

    static const uavBombingway_type_ uavBombingway;

    // uavLoadReconnaissanceRangeMin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLoadReconnaissanceRangeMin_type_;

    static const uavLoadReconnaissanceRangeMin_type_ uavLoadReconnaissanceRangeMin;

    // uavLoadReconnaissanceRangeMax
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLoadReconnaissanceRangeMax_type_;

    static const uavLoadReconnaissanceRangeMax_type_ uavLoadReconnaissanceRangeMax;

    // uavLoadReconnaissanceAccuracy
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLoadReconnaissanceAccuracy_type_;

    static const uavLoadReconnaissanceAccuracy_type_ uavLoadReconnaissanceAccuracy;

    // uavRecoveryway
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavRecoveryway_type_;

    static const uavRecoveryway_type_ uavRecoveryway;

    // uavLowAltitudeBreakthroughSpeed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavLowAltitudeBreakthroughSpeed_type_;

    static const uavLowAltitudeBreakthroughSpeed_type_ uavLowAltitudeBreakthroughSpeed;

    // uavHangingLoctionCapacity
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavHangingLoctionCapacity_type_;

    static const uavHangingLoctionCapacity_type_ uavHangingLoctionCapacity;

    // uavOperationWay
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavOperationWay_type_;

    static const uavOperationWay_type_ uavOperationWay;

    // uavAttackaccuracy
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavAttackaccuracy_type_;

    static const uavAttackaccuracy_type_ uavAttackaccuracy;

    // uavRadarCrossSection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavRadarCrossSection_type_;

    static const uavRadarCrossSection_type_ uavRadarCrossSection;

    // uavCenterOfGravityFrontLimit
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavCenterOfGravityFrontLimit_type_;

    static const uavCenterOfGravityFrontLimit_type_ uavCenterOfGravityFrontLimit;

    // uavCenterOfGravityAfterwardLimit
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavCenterOfGravityAfterwardLimit_type_;

    static const uavCenterOfGravityAfterwardLimit_type_ uavCenterOfGravityAfterwardLimit;

    // uavMaximumTakeoffWeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumTakeoffWeight_type_;

    static const uavMaximumTakeoffWeight_type_ uavMaximumTakeoffWeight;

    // uavEmptyWeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavEmptyWeight_type_;

    static const uavEmptyWeight_type_ uavEmptyWeight;

    // uavMaximumFuelCapacity
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumFuelCapacity_type_;

    static const uavMaximumFuelCapacity_type_ uavMaximumFuelCapacity;

    // uavMaximumExternalWeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumExternalWeight_type_;

    static const uavMaximumExternalWeight_type_ uavMaximumExternalWeight;

    // uavCeiling
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavCeiling_type_;

    static const uavCeiling_type_ uavCeiling;

    // uavMaximumGroundStartingHeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumGroundStartingHeight_type_;

    static const uavMaximumGroundStartingHeight_type_ uavMaximumGroundStartingHeight;

    // uavMaximumAirStartingAltitude
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumAirStartingAltitude_type_;

    static const uavMaximumAirStartingAltitude_type_ uavMaximumAirStartingAltitude;

    // uavMaximumEndurance
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumEndurance_type_;

    static const uavMaximumEndurance_type_ uavMaximumEndurance;

    // uavMaximumFlightVacuumSpeed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMaximumFlightVacuumSpeed_type_;

    static const uavMaximumFlightVacuumSpeed_type_ uavMaximumFlightVacuumSpeed;

    // uavMinimumFlightMeterSpeed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    uavMinimumFlightMeterSpeed_type_;

    static const uavMinimumFlightMeterSpeed_type_ uavMinimumFlightMeterSpeed;

    // sealLevelTakeoffAndRollDistance
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    sealLevelTakeoffAndRollDistance_type_;

    static const sealLevelTakeoffAndRollDistance_type_ sealLevelTakeoffAndRollDistance;

    // sealLevelLandingAndRollDistance
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    sealLevelLandingAndRollDistance_type_;

    static const sealLevelLandingAndRollDistance_type_ sealLevelLandingAndRollDistance;

    // cruiseAltitudeReconnaissanceConfiguration
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    cruiseAltitudeReconnaissanceConfiguration_type_;

    static const cruiseAltitudeReconnaissanceConfiguration_type_ cruiseAltitudeReconnaissanceConfiguration;

    // cruiseAltitudeFullExternalConfiguration
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        float,
        pgsql::id_real >::query_type,
      pgsql::id_real >
    cruiseAltitudeFullExternalConfiguration_type_;

    static const cruiseAltitudeFullExternalConfiguration_type_ cruiseAltitudeFullExternalConfiguration;

    // uavCreatModelTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::QDateTime,
        pgsql::id_timestamp >::query_type,
      pgsql::id_timestamp >
    uavCreatModelTime_type_;

    static const uavCreatModelTime_type_ uavCreatModelTime;

    // uavImgName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavImgName_type_;

    static const uavImgName_type_ uavImgName;

    // uavImgUrl
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    uavImgUrl_type_;

    static const uavImgUrl_type_ uavImgUrl;
  };

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::id_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavType_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavType (A::table_name, "\"uav_type\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavName_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavName (A::table_name, "\"uav_name\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavId_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavId (A::table_name, "\"uav_id\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLength_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLength (A::table_name, "\"length\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavWidth_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavWidth (A::table_name, "\"width\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavHeight_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavHeight (A::table_name, "\"height\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavInvisibility_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavInvisibility (A::table_name, "\"have_invisibility\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightHeightRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightHeightRangeMin (A::table_name, "\"flight_height_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightHeightRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightHeightRangeMax (A::table_name, "\"flight_height_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightSpeedRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightSpeedRangeMin (A::table_name, "\"flight_speed_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightSpeedRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightSpeedRangeMax (A::table_name, "\"flight_speed_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightDistanceRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightDistanceRangeMin (A::table_name, "\"flight_distance_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightDistanceRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightDistanceRangeMax (A::table_name, "\"flight_distance_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightTimeRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightTimeRangeMin (A::table_name, "\"flight_time_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavFlightTimeRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavFlightTimeRangeMax (A::table_name, "\"flight_time_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavTakeoffDistance_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavTakeoffDistance (A::table_name, "\"takeoff_distance\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLandDistance_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLandDistance (A::table_name, "\"landing_distance\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavTurningRadiusRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavTurningRadiusRangeMin (A::table_name, "\"turn_radius_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavTurningRadiusRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavTurningRadiusRangeMax (A::table_name, "\"turn_radius_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavOperatioanalRadius_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavOperatioanalRadius (A::table_name, "\"combat_radius\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavInvestigationPayloadType_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavInvestigationPayloadType (A::table_name, "\"payload_type\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavBombingway_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavBombingway (A::table_name, "\"bomb_way\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLoadReconnaissanceRangeMin_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLoadReconnaissanceRangeMin (A::table_name, "\"recon_range_min\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLoadReconnaissanceRangeMax_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLoadReconnaissanceRangeMax (A::table_name, "\"recon_range_max\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLoadReconnaissanceAccuracy_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLoadReconnaissanceAccuracy (A::table_name, "\"recon_accuracy\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavRecoveryway_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavRecoveryway (A::table_name, "\"recovery_way\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavLowAltitudeBreakthroughSpeed_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavLowAltitudeBreakthroughSpeed (A::table_name, "\"low_alt_speed\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavHangingLoctionCapacity_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavHangingLoctionCapacity (A::table_name, "\"hanging_capacity\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavOperationWay_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavOperationWay (A::table_name, "\"operation_way\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavAttackaccuracy_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavAttackaccuracy (A::table_name, "\"attack_accuracy\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavRadarCrossSection_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavRadarCrossSection (A::table_name, "\"rcs\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavCenterOfGravityFrontLimit_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavCenterOfGravityFrontLimit (A::table_name, "\"cg_front_limit\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavCenterOfGravityAfterwardLimit_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavCenterOfGravityAfterwardLimit (A::table_name, "\"cg_rear_limit\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumTakeoffWeight_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumTakeoffWeight (A::table_name, "\"max_takeoff_weight\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavEmptyWeight_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavEmptyWeight (A::table_name, "\"empty_weight\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumFuelCapacity_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumFuelCapacity (A::table_name, "\"max_fuel\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumExternalWeight_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumExternalWeight (A::table_name, "\"max_external_weight\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavCeiling_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavCeiling (A::table_name, "\"ceiling\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumGroundStartingHeight_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumGroundStartingHeight (A::table_name, "\"ground_start_alt\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumAirStartingAltitude_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumAirStartingAltitude (A::table_name, "\"air_start_alt\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumEndurance_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumEndurance (A::table_name, "\"endurance\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMaximumFlightVacuumSpeed_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMaximumFlightVacuumSpeed (A::table_name, "\"max_vacuum_speed\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavMinimumFlightMeterSpeed_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavMinimumFlightMeterSpeed (A::table_name, "\"min_meter_speed\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::sealLevelTakeoffAndRollDistance_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  sealLevelTakeoffAndRollDistance (A::table_name, "\"sea_takeoff_roll\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::sealLevelLandingAndRollDistance_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  sealLevelLandingAndRollDistance (A::table_name, "\"sea_landing_roll\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::cruiseAltitudeReconnaissanceConfiguration_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  cruiseAltitudeReconnaissanceConfiguration (A::table_name, "\"recon_cruise_alt\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::cruiseAltitudeFullExternalConfiguration_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  cruiseAltitudeFullExternalConfiguration (A::table_name, "\"full_external_cruise_alt\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavCreatModelTime_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavCreatModelTime (A::table_name, "\"recordcreation_time\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavImgName_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavImgName (A::table_name, "\"image_name\"", 0);

  template <typename A>
  const typename query_columns< ::UavModelEntity, id_pgsql, A >::uavImgUrl_type_
  query_columns< ::UavModelEntity, id_pgsql, A >::
  uavImgUrl (A::table_name, "\"image_url\"", 0);

  template <typename A>
  struct pointer_query_columns< ::UavModelEntity, id_pgsql, A >:
    query_columns< ::UavModelEntity, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::UavModelEntity, id_pgsql >:
    public access::object_traits< ::UavModelEntity >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // uavType_
      //
      details::buffer uavType_value;
      std::size_t uavType_size;
      bool uavType_null;

      // uavName_
      //
      details::buffer uavName_value;
      std::size_t uavName_size;
      bool uavName_null;

      // uavId_
      //
      details::buffer uavId_value;
      std::size_t uavId_size;
      bool uavId_null;

      // uavLength_
      //
      float uavLength_value;
      bool uavLength_null;

      // uavWidth_
      //
      float uavWidth_value;
      bool uavWidth_null;

      // uavHeight_
      //
      float uavHeight_value;
      bool uavHeight_null;

      // uavInvisibility_
      //
      details::buffer uavInvisibility_value;
      std::size_t uavInvisibility_size;
      bool uavInvisibility_null;

      // uavFlightHeightRangeMin_
      //
      float uavFlightHeightRangeMin_value;
      bool uavFlightHeightRangeMin_null;

      // uavFlightHeightRangeMax_
      //
      float uavFlightHeightRangeMax_value;
      bool uavFlightHeightRangeMax_null;

      // uavFlightSpeedRangeMin_
      //
      float uavFlightSpeedRangeMin_value;
      bool uavFlightSpeedRangeMin_null;

      // uavFlightSpeedRangeMax_
      //
      float uavFlightSpeedRangeMax_value;
      bool uavFlightSpeedRangeMax_null;

      // uavFlightDistanceRangeMin_
      //
      float uavFlightDistanceRangeMin_value;
      bool uavFlightDistanceRangeMin_null;

      // uavFlightDistanceRangeMax_
      //
      float uavFlightDistanceRangeMax_value;
      bool uavFlightDistanceRangeMax_null;

      // uavFlightTimeRangeMin_
      //
      float uavFlightTimeRangeMin_value;
      bool uavFlightTimeRangeMin_null;

      // uavFlightTimeRangeMax_
      //
      float uavFlightTimeRangeMax_value;
      bool uavFlightTimeRangeMax_null;

      // uavTakeoffDistance_
      //
      float uavTakeoffDistance_value;
      bool uavTakeoffDistance_null;

      // uavLandDistance_
      //
      float uavLandDistance_value;
      bool uavLandDistance_null;

      // uavTurningRadiusRangeMin_
      //
      float uavTurningRadiusRangeMin_value;
      bool uavTurningRadiusRangeMin_null;

      // uavTurningRadiusRangeMax_
      //
      float uavTurningRadiusRangeMax_value;
      bool uavTurningRadiusRangeMax_null;

      // uavOperatioanalRadius_
      //
      float uavOperatioanalRadius_value;
      bool uavOperatioanalRadius_null;

      // uavInvestigationPayloadType_
      //
      details::buffer uavInvestigationPayloadType_value;
      std::size_t uavInvestigationPayloadType_size;
      bool uavInvestigationPayloadType_null;

      // uavBombingway_
      //
      details::buffer uavBombingway_value;
      std::size_t uavBombingway_size;
      bool uavBombingway_null;

      // uavLoadReconnaissanceRangeMin_
      //
      float uavLoadReconnaissanceRangeMin_value;
      bool uavLoadReconnaissanceRangeMin_null;

      // uavLoadReconnaissanceRangeMax_
      //
      float uavLoadReconnaissanceRangeMax_value;
      bool uavLoadReconnaissanceRangeMax_null;

      // uavLoadReconnaissanceAccuracy_
      //
      float uavLoadReconnaissanceAccuracy_value;
      bool uavLoadReconnaissanceAccuracy_null;

      // uavRecoveryway_
      //
      details::buffer uavRecoveryway_value;
      std::size_t uavRecoveryway_size;
      bool uavRecoveryway_null;

      // uavLowAltitudeBreakthroughSpeed_
      //
      float uavLowAltitudeBreakthroughSpeed_value;
      bool uavLowAltitudeBreakthroughSpeed_null;

      // uavHangingLoctionCapacity_
      //
      details::buffer uavHangingLoctionCapacity_value;
      std::size_t uavHangingLoctionCapacity_size;
      bool uavHangingLoctionCapacity_null;

      // uavOperationWay_
      //
      details::buffer uavOperationWay_value;
      std::size_t uavOperationWay_size;
      bool uavOperationWay_null;

      // uavAttackaccuracy_
      //
      float uavAttackaccuracy_value;
      bool uavAttackaccuracy_null;

      // uavRadarCrossSection_
      //
      float uavRadarCrossSection_value;
      bool uavRadarCrossSection_null;

      // uavCenterOfGravityFrontLimit_
      //
      float uavCenterOfGravityFrontLimit_value;
      bool uavCenterOfGravityFrontLimit_null;

      // uavCenterOfGravityAfterwardLimit_
      //
      float uavCenterOfGravityAfterwardLimit_value;
      bool uavCenterOfGravityAfterwardLimit_null;

      // uavMaximumTakeoffWeight_
      //
      float uavMaximumTakeoffWeight_value;
      bool uavMaximumTakeoffWeight_null;

      // uavEmptyWeight_
      //
      float uavEmptyWeight_value;
      bool uavEmptyWeight_null;

      // uavMaximumFuelCapacity_
      //
      float uavMaximumFuelCapacity_value;
      bool uavMaximumFuelCapacity_null;

      // uavMaximumExternalWeight_
      //
      float uavMaximumExternalWeight_value;
      bool uavMaximumExternalWeight_null;

      // uavCeiling_
      //
      float uavCeiling_value;
      bool uavCeiling_null;

      // uavMaximumGroundStartingHeight_
      //
      float uavMaximumGroundStartingHeight_value;
      bool uavMaximumGroundStartingHeight_null;

      // uavMaximumAirStartingAltitude_
      //
      float uavMaximumAirStartingAltitude_value;
      bool uavMaximumAirStartingAltitude_null;

      // uavMaximumEndurance_
      //
      float uavMaximumEndurance_value;
      bool uavMaximumEndurance_null;

      // uavMaximumFlightVacuumSpeed_
      //
      float uavMaximumFlightVacuumSpeed_value;
      bool uavMaximumFlightVacuumSpeed_null;

      // uavMinimumFlightMeterSpeed_
      //
      float uavMinimumFlightMeterSpeed_value;
      bool uavMinimumFlightMeterSpeed_null;

      // sealLevelTakeoffAndRollDistance_
      //
      float sealLevelTakeoffAndRollDistance_value;
      bool sealLevelTakeoffAndRollDistance_null;

      // sealLevelLandingAndRollDistance_
      //
      float sealLevelLandingAndRollDistance_value;
      bool sealLevelLandingAndRollDistance_null;

      // cruiseAltitudeReconnaissanceConfiguration_
      //
      float cruiseAltitudeReconnaissanceConfiguration_value;
      bool cruiseAltitudeReconnaissanceConfiguration_null;

      // cruiseAltitudeFullExternalConfiguration_
      //
      float cruiseAltitudeFullExternalConfiguration_value;
      bool cruiseAltitudeFullExternalConfiguration_null;

      // uavCreatModelTime_
      //
     unsigned long long uavCreatModelTime_value;
      bool uavCreatModelTime_null;

      // uavImgName_
      //
      details::buffer uavImgName_value;
      std::size_t uavImgName_size;
      bool uavImgName_null;

      // uavImgUrl_
      //
      details::buffer uavImgUrl_value;
      std::size_t uavImgUrl_size;
      bool uavImgUrl_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 51UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::UavModelEntity, id_common >:
    public access::object_traits_impl< ::UavModelEntity, id_pgsql >
  {
  };

  // UavModelEntity
  //
}

#include "uavmodelentity-odb.ixx"

#include <odb/post.hxx>

#endif // UAVMODELENTITY_ODB_HXX
