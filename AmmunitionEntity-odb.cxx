// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "AmmunitionEntity-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // AmmunitionEntity
  //

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  persist_statement_name[] = "persist_AmmunitionEntity";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  find_statement_name[] = "find_AmmunitionEntity";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  update_statement_name[] = "update_AmmunitionEntity";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  erase_statement_name[] = "erase_AmmunitionEntity";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  query_statement_name[] = "query_AmmunitionEntity";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  erase_query_statement_name[] = "erase_query_AmmunitionEntity";

  const unsigned int access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid
  };

  const unsigned int access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::float4_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::id_type
  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::id_type
  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // ammunitionType_
    //
    if (t[1UL])
    {
      i.ammunitionType_value.capacity (i.ammunitionType_size);
      grew = true;
    }

    // ammunitionName_
    //
    if (t[2UL])
    {
      i.ammunitionName_value.capacity (i.ammunitionName_size);
      grew = true;
    }

    // ammunitionId_
    //
    if (t[3UL])
    {
      i.ammunitionId_value.capacity (i.ammunitionId_size);
      grew = true;
    }

    // ammunitionLength_
    //
    t[4UL] = 0;

    // ammunitionWidth_
    //
    t[5UL] = 0;

    // ammunitionWeight_
    //
    t[6UL] = 0;

    // guidanceType_
    //
    if (t[7UL])
    {
      i.guidanceType_value.capacity (i.guidanceType_size);
      grew = true;
    }

    // placementHeightMin_
    //
    t[8UL] = 0;

    // placementHeightMax_
    //
    t[9UL] = 0;

    // placementDistanceMin_
    //
    t[10UL] = 0;

    // placementDistanceMax_
    //
    t[11UL] = 0;

    // projectionAngle_
    //
    t[12UL] = 0;

    // deliveryMethod_
    //
    t[13UL] = 0;

    // attackTargetType_
    //
    t[14UL] = 0;

    // lethalDose_
    //
    t[15UL] = 0;

    // killingMethod_
    //
    t[16UL] = 0;

    // damageDepth_
    //
    t[17UL] = 0;

    // killingRangeMin_
    //
    t[18UL] = 0;

    // killingRangeMax_
    //
    t[19UL] = 0;

    // ammunitionCreatModelTime_
    //
    if (t[20UL])
    {
      i.ammunitionCreatModelTime_value.capacity (i.ammunitionCreatModelTime_size);
      grew = true;
    }

    // uavImgUrl_
    //
    if (t[21UL])
    {
      i.uavImgUrl_value.capacity (i.uavImgUrl_size);
      grew = true;
    }

    // imageName_
    //
    t[22UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // ammunitionType_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ammunitionType_value.data ();
    b[n].capacity = i.ammunitionType_value.capacity ();
    b[n].size = &i.ammunitionType_size;
    b[n].is_null = &i.ammunitionType_null;
    n++;

    // ammunitionName_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ammunitionName_value.data ();
    b[n].capacity = i.ammunitionName_value.capacity ();
    b[n].size = &i.ammunitionName_size;
    b[n].is_null = &i.ammunitionName_null;
    n++;

    // ammunitionId_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ammunitionId_value.data ();
    b[n].capacity = i.ammunitionId_value.capacity ();
    b[n].size = &i.ammunitionId_size;
    b[n].is_null = &i.ammunitionId_null;
    n++;

    // ammunitionLength_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.ammunitionLength_value;
    b[n].is_null = &i.ammunitionLength_null;
    n++;

    // ammunitionWidth_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.ammunitionWidth_value;
    b[n].is_null = &i.ammunitionWidth_null;
    n++;

    // ammunitionWeight_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.ammunitionWeight_value;
    b[n].is_null = &i.ammunitionWeight_null;
    n++;

    // guidanceType_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.guidanceType_value.data ();
    b[n].capacity = i.guidanceType_value.capacity ();
    b[n].size = &i.guidanceType_size;
    b[n].is_null = &i.guidanceType_null;
    n++;

    // placementHeightMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.placementHeightMin_value;
    b[n].is_null = &i.placementHeightMin_null;
    n++;

    // placementHeightMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.placementHeightMax_value;
    b[n].is_null = &i.placementHeightMax_null;
    n++;

    // placementDistanceMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.placementDistanceMin_value;
    b[n].is_null = &i.placementDistanceMin_null;
    n++;

    // placementDistanceMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.placementDistanceMax_value;
    b[n].is_null = &i.placementDistanceMax_null;
    n++;

    // projectionAngle_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.projectionAngle_value;
    b[n].is_null = &i.projectionAngle_null;
    n++;

    // deliveryMethod_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.deliveryMethod_value;
    b[n].is_null = &i.deliveryMethod_null;
    n++;

    // attackTargetType_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.attackTargetType_value;
    b[n].is_null = &i.attackTargetType_null;
    n++;

    // lethalDose_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.lethalDose_value;
    b[n].is_null = &i.lethalDose_null;
    n++;

    // killingMethod_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.killingMethod_value;
    b[n].is_null = &i.killingMethod_null;
    n++;

    // damageDepth_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.damageDepth_value;
    b[n].is_null = &i.damageDepth_null;
    n++;

    // killingRangeMin_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.killingRangeMin_value;
    b[n].is_null = &i.killingRangeMin_null;
    n++;

    // killingRangeMax_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.killingRangeMax_value;
    b[n].is_null = &i.killingRangeMax_null;
    n++;

    // ammunitionCreatModelTime_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.ammunitionCreatModelTime_value.data ();
    b[n].capacity = i.ammunitionCreatModelTime_value.capacity ();
    b[n].size = &i.ammunitionCreatModelTime_size;
    b[n].is_null = &i.ammunitionCreatModelTime_null;
    n++;

    // uavImgUrl_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uavImgUrl_value.data ();
    b[n].capacity = i.uavImgUrl_value.capacity ();
    b[n].size = &i.uavImgUrl_size;
    b[n].is_null = &i.uavImgUrl_null;
    n++;

    // imageName_
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.imageName_value;
    b[n].is_null = &i.imageName_null;
    n++;
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // ammunitionType_
    //
    {
      ::std::string const& v =
        o.ammunitionType_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ammunitionType_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ammunitionType_value,
        size,
        is_null,
        v);
      i.ammunitionType_null = is_null;
      i.ammunitionType_size = size;
      grew = grew || (cap != i.ammunitionType_value.capacity ());
    }

    // ammunitionName_
    //
    {
      ::std::string const& v =
        o.ammunitionName_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ammunitionName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ammunitionName_value,
        size,
        is_null,
        v);
      i.ammunitionName_null = is_null;
      i.ammunitionName_size = size;
      grew = grew || (cap != i.ammunitionName_value.capacity ());
    }

    // ammunitionId_
    //
    {
      ::std::string const& v =
        o.ammunitionId_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ammunitionId_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ammunitionId_value,
        size,
        is_null,
        v);
      i.ammunitionId_null = is_null;
      i.ammunitionId_size = size;
      grew = grew || (cap != i.ammunitionId_value.capacity ());
    }

    // ammunitionLength_
    //
    {
      float const& v =
        o.ammunitionLength_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.ammunitionLength_value, is_null, v);
      i.ammunitionLength_null = is_null;
    }

    // ammunitionWidth_
    //
    {
      float const& v =
        o.ammunitionWidth_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.ammunitionWidth_value, is_null, v);
      i.ammunitionWidth_null = is_null;
    }

    // ammunitionWeight_
    //
    {
      float const& v =
        o.ammunitionWeight_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.ammunitionWeight_value, is_null, v);
      i.ammunitionWeight_null = is_null;
    }

    // guidanceType_
    //
    {
      ::std::string const& v =
        o.guidanceType_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.guidanceType_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.guidanceType_value,
        size,
        is_null,
        v);
      i.guidanceType_null = is_null;
      i.guidanceType_size = size;
      grew = grew || (cap != i.guidanceType_value.capacity ());
    }

    // placementHeightMin_
    //
    {
      float const& v =
        o.placementHeightMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.placementHeightMin_value, is_null, v);
      i.placementHeightMin_null = is_null;
    }

    // placementHeightMax_
    //
    {
      float const& v =
        o.placementHeightMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.placementHeightMax_value, is_null, v);
      i.placementHeightMax_null = is_null;
    }

    // placementDistanceMin_
    //
    {
      float const& v =
        o.placementDistanceMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.placementDistanceMin_value, is_null, v);
      i.placementDistanceMin_null = is_null;
    }

    // placementDistanceMax_
    //
    {
      float const& v =
        o.placementDistanceMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.placementDistanceMax_value, is_null, v);
      i.placementDistanceMax_null = is_null;
    }

    // projectionAngle_
    //
    {
      float const& v =
        o.projectionAngle_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.projectionAngle_value, is_null, v);
      i.projectionAngle_null = is_null;
    }

    // deliveryMethod_
    //
    {
      float const& v =
        o.deliveryMethod_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.deliveryMethod_value, is_null, v);
      i.deliveryMethod_null = is_null;
    }

    // attackTargetType_
    //
    {
      float const& v =
        o.attackTargetType_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.attackTargetType_value, is_null, v);
      i.attackTargetType_null = is_null;
    }

    // lethalDose_
    //
    {
      float const& v =
        o.lethalDose_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.lethalDose_value, is_null, v);
      i.lethalDose_null = is_null;
    }

    // killingMethod_
    //
    {
      float const& v =
        o.killingMethod_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.killingMethod_value, is_null, v);
      i.killingMethod_null = is_null;
    }

    // damageDepth_
    //
    {
      float const& v =
        o.damageDepth_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.damageDepth_value, is_null, v);
      i.damageDepth_null = is_null;
    }

    // killingRangeMin_
    //
    {
      float const& v =
        o.killingRangeMin_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.killingRangeMin_value, is_null, v);
      i.killingRangeMin_null = is_null;
    }

    // killingRangeMax_
    //
    {
      float const& v =
        o.killingRangeMax_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.killingRangeMax_value, is_null, v);
      i.killingRangeMax_null = is_null;
    }

    // ammunitionCreatModelTime_
    //
    {
      ::std::string const& v =
        o.ammunitionCreatModelTime_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.ammunitionCreatModelTime_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.ammunitionCreatModelTime_value,
        size,
        is_null,
        v);
      i.ammunitionCreatModelTime_null = is_null;
      i.ammunitionCreatModelTime_size = size;
      grew = grew || (cap != i.ammunitionCreatModelTime_value.capacity ());
    }

    // uavImgUrl_
    //
    {
      ::std::string const& v =
        o.uavImgUrl_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uavImgUrl_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uavImgUrl_value,
        size,
        is_null,
        v);
      i.uavImgUrl_null = is_null;
      i.uavImgUrl_size = size;
      grew = grew || (cap != i.uavImgUrl_value.capacity ());
    }

    // imageName_
    //
    {
      float const& v =
        o.imageName_;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.imageName_value, is_null, v);
      i.imageName_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long int& v =
        o.id_;

      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // ammunitionType_
    //
    {
      ::std::string& v =
        o.ammunitionType_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ammunitionType_value,
        i.ammunitionType_size,
        i.ammunitionType_null);
    }

    // ammunitionName_
    //
    {
      ::std::string& v =
        o.ammunitionName_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ammunitionName_value,
        i.ammunitionName_size,
        i.ammunitionName_null);
    }

    // ammunitionId_
    //
    {
      ::std::string& v =
        o.ammunitionId_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ammunitionId_value,
        i.ammunitionId_size,
        i.ammunitionId_null);
    }

    // ammunitionLength_
    //
    {
      float& v =
        o.ammunitionLength_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.ammunitionLength_value,
        i.ammunitionLength_null);
    }

    // ammunitionWidth_
    //
    {
      float& v =
        o.ammunitionWidth_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.ammunitionWidth_value,
        i.ammunitionWidth_null);
    }

    // ammunitionWeight_
    //
    {
      float& v =
        o.ammunitionWeight_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.ammunitionWeight_value,
        i.ammunitionWeight_null);
    }

    // guidanceType_
    //
    {
      ::std::string& v =
        o.guidanceType_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.guidanceType_value,
        i.guidanceType_size,
        i.guidanceType_null);
    }

    // placementHeightMin_
    //
    {
      float& v =
        o.placementHeightMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.placementHeightMin_value,
        i.placementHeightMin_null);
    }

    // placementHeightMax_
    //
    {
      float& v =
        o.placementHeightMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.placementHeightMax_value,
        i.placementHeightMax_null);
    }

    // placementDistanceMin_
    //
    {
      float& v =
        o.placementDistanceMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.placementDistanceMin_value,
        i.placementDistanceMin_null);
    }

    // placementDistanceMax_
    //
    {
      float& v =
        o.placementDistanceMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.placementDistanceMax_value,
        i.placementDistanceMax_null);
    }

    // projectionAngle_
    //
    {
      float& v =
        o.projectionAngle_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.projectionAngle_value,
        i.projectionAngle_null);
    }

    // deliveryMethod_
    //
    {
      float& v =
        o.deliveryMethod_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.deliveryMethod_value,
        i.deliveryMethod_null);
    }

    // attackTargetType_
    //
    {
      float& v =
        o.attackTargetType_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.attackTargetType_value,
        i.attackTargetType_null);
    }

    // lethalDose_
    //
    {
      float& v =
        o.lethalDose_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.lethalDose_value,
        i.lethalDose_null);
    }

    // killingMethod_
    //
    {
      float& v =
        o.killingMethod_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.killingMethod_value,
        i.killingMethod_null);
    }

    // damageDepth_
    //
    {
      float& v =
        o.damageDepth_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.damageDepth_value,
        i.damageDepth_null);
    }

    // killingRangeMin_
    //
    {
      float& v =
        o.killingRangeMin_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.killingRangeMin_value,
        i.killingRangeMin_null);
    }

    // killingRangeMax_
    //
    {
      float& v =
        o.killingRangeMax_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.killingRangeMax_value,
        i.killingRangeMax_null);
    }

    // ammunitionCreatModelTime_
    //
    {
      ::std::string& v =
        o.ammunitionCreatModelTime_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.ammunitionCreatModelTime_value,
        i.ammunitionCreatModelTime_size,
        i.ammunitionCreatModelTime_null);
    }

    // uavImgUrl_
    //
    {
      ::std::string& v =
        o.uavImgUrl_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uavImgUrl_value,
        i.uavImgUrl_size,
        i.uavImgUrl_null);
    }

    // imageName_
    //
    {
      float& v =
        o.imageName_;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.imageName_value,
        i.imageName_null);
    }
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::persist_statement[] =
  "INSERT INTO \"public\".\"ammunition_data\" "
  "(\"id\", "
  "\"ammunition_type\", "
  "\"ammunition_name\", "
  "\"ammunition_id\", "
  "\"length\", "
  "\"width\", "
  "\"weight\", "
  "\"guidance_type\", "
  "\"placement_height_min\", "
  "\"placement_height_max\", "
  "\"placement_distance_min\", "
  "\"placement_distance_max\", "
  "\"projection_angle\", "
  "\"delivery_method\", "
  "\"attack_target_type\", "
  "\"lethal_dose\", "
  "\"killing_method\", "
  "\"damage_depth\", "
  "\"killing_range_min\", "
  "\"killing_range_max\", "
  "\"create_time\", "
  "\"image_url\", "
  "\"image_name\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::find_statement[] =
  "SELECT "
  "\"public\".\"ammunition_data\".\"id\", "
  "\"public\".\"ammunition_data\".\"ammunition_type\", "
  "\"public\".\"ammunition_data\".\"ammunition_name\", "
  "\"public\".\"ammunition_data\".\"ammunition_id\", "
  "\"public\".\"ammunition_data\".\"length\", "
  "\"public\".\"ammunition_data\".\"width\", "
  "\"public\".\"ammunition_data\".\"weight\", "
  "\"public\".\"ammunition_data\".\"guidance_type\", "
  "\"public\".\"ammunition_data\".\"placement_height_min\", "
  "\"public\".\"ammunition_data\".\"placement_height_max\", "
  "\"public\".\"ammunition_data\".\"placement_distance_min\", "
  "\"public\".\"ammunition_data\".\"placement_distance_max\", "
  "\"public\".\"ammunition_data\".\"projection_angle\", "
  "\"public\".\"ammunition_data\".\"delivery_method\", "
  "\"public\".\"ammunition_data\".\"attack_target_type\", "
  "\"public\".\"ammunition_data\".\"lethal_dose\", "
  "\"public\".\"ammunition_data\".\"killing_method\", "
  "\"public\".\"ammunition_data\".\"damage_depth\", "
  "\"public\".\"ammunition_data\".\"killing_range_min\", "
  "\"public\".\"ammunition_data\".\"killing_range_max\", "
  "\"public\".\"ammunition_data\".\"create_time\", "
  "\"public\".\"ammunition_data\".\"image_url\", "
  "\"public\".\"ammunition_data\".\"image_name\" "
  "FROM \"public\".\"ammunition_data\" "
  "WHERE \"public\".\"ammunition_data\".\"id\"=$1";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::update_statement[] =
  "UPDATE \"public\".\"ammunition_data\" "
  "SET "
  "\"ammunition_type\"=$1, "
  "\"ammunition_name\"=$2, "
  "\"ammunition_id\"=$3, "
  "\"length\"=$4, "
  "\"width\"=$5, "
  "\"weight\"=$6, "
  "\"guidance_type\"=$7, "
  "\"placement_height_min\"=$8, "
  "\"placement_height_max\"=$9, "
  "\"placement_distance_min\"=$10, "
  "\"placement_distance_max\"=$11, "
  "\"projection_angle\"=$12, "
  "\"delivery_method\"=$13, "
  "\"attack_target_type\"=$14, "
  "\"lethal_dose\"=$15, "
  "\"killing_method\"=$16, "
  "\"damage_depth\"=$17, "
  "\"killing_range_min\"=$18, "
  "\"killing_range_max\"=$19, "
  "\"create_time\"=$20, "
  "\"image_url\"=$21, "
  "\"image_name\"=$22 "
  "WHERE \"id\"=$23";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::erase_statement[] =
  "DELETE FROM \"public\".\"ammunition_data\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::query_statement[] =
  "SELECT "
  "\"public\".\"ammunition_data\".\"id\", "
  "\"public\".\"ammunition_data\".\"ammunition_type\", "
  "\"public\".\"ammunition_data\".\"ammunition_name\", "
  "\"public\".\"ammunition_data\".\"ammunition_id\", "
  "\"public\".\"ammunition_data\".\"length\", "
  "\"public\".\"ammunition_data\".\"width\", "
  "\"public\".\"ammunition_data\".\"weight\", "
  "\"public\".\"ammunition_data\".\"guidance_type\", "
  "\"public\".\"ammunition_data\".\"placement_height_min\", "
  "\"public\".\"ammunition_data\".\"placement_height_max\", "
  "\"public\".\"ammunition_data\".\"placement_distance_min\", "
  "\"public\".\"ammunition_data\".\"placement_distance_max\", "
  "\"public\".\"ammunition_data\".\"projection_angle\", "
  "\"public\".\"ammunition_data\".\"delivery_method\", "
  "\"public\".\"ammunition_data\".\"attack_target_type\", "
  "\"public\".\"ammunition_data\".\"lethal_dose\", "
  "\"public\".\"ammunition_data\".\"killing_method\", "
  "\"public\".\"ammunition_data\".\"damage_depth\", "
  "\"public\".\"ammunition_data\".\"killing_range_min\", "
  "\"public\".\"ammunition_data\".\"killing_range_max\", "
  "\"public\".\"ammunition_data\".\"create_time\", "
  "\"public\".\"ammunition_data\".\"image_url\", "
  "\"public\".\"ammunition_data\".\"image_name\" "
  "FROM \"public\".\"ammunition_data\"";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"public\".\"ammunition_data\"";

  const char access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::table_name[] =
  "\"public\".\"ammunition_data\"";

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::pointer_type
  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::object_type >
  access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::AmmunitionEntity, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"public\".\"ammunition_data\" CASCADE");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"public\".\"ammunition_data\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"ammunition_type\" TEXT NOT NULL,\n"
                      "  \"ammunition_name\" TEXT NOT NULL,\n"
                      "  \"ammunition_id\" TEXT NOT NULL,\n"
                      "  \"length\" REAL NOT NULL,\n"
                      "  \"width\" REAL NOT NULL,\n"
                      "  \"weight\" REAL NOT NULL,\n"
                      "  \"guidance_type\" TEXT NOT NULL,\n"
                      "  \"placement_height_min\" REAL NOT NULL,\n"
                      "  \"placement_height_max\" REAL NOT NULL,\n"
                      "  \"placement_distance_min\" REAL NOT NULL,\n"
                      "  \"placement_distance_max\" REAL NOT NULL,\n"
                      "  \"projection_angle\" REAL NOT NULL,\n"
                      "  \"delivery_method\" REAL NOT NULL,\n"
                      "  \"attack_target_type\" REAL NOT NULL,\n"
                      "  \"lethal_dose\" REAL NOT NULL,\n"
                      "  \"killing_method\" REAL NOT NULL,\n"
                      "  \"damage_depth\" REAL NOT NULL,\n"
                      "  \"killing_range_min\" REAL NOT NULL,\n"
                      "  \"killing_range_max\" REAL NOT NULL,\n"
                      "  \"create_time\" TEXT NOT NULL,\n"
                      "  \"image_url\" TEXT NOT NULL,\n"
                      "  \"image_name\" REAL NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_pgsql,
    "",
    &create_schema);
}

#include <odb/post.hxx>
